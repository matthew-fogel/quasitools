# This file was generated by SableCC (http://www.sablecc.org/). 

from types import StringType, FileType, ListType

def caller(n=1):
    import inspect
    return inspect.getouterframes(inspect.currentframe())[n][3]
	
def abstract():
    raise NotImplementedError(caller() + ' must be implemented in subclass')

class Stack(list):
    def push(self, value):
        self.append(value)
    
    def peek(self):
        return self[len(self)-1]
    
    def empty(self):
        return len(self) == 0
        	
class PushbackReader(object):
    def __init__(self, reader):
        self.__reader = reader
        self.__stack = Stack()

    def peek (self):
        if (len(self.__stack) > 0 ): 
    	    result = self.__stack.peek()
        else:
    	    result = self.__reader.read(1)
    	    self.__reader.seek(-1, 1) # go back to the previous position
        return result

    def read (self):
        if ( len(self.__stack) > 0 ):
    	    return self.__stack.pop()
        return self.__reader.read(1)

    def unread (self, c):
        self.__stack.append(c)

class StringBuffer(object):
  def __init__(self, obj=None):
      self.buffer = [] 
      if not(obj == None):
          if isinstance(obj, StringType):
              self.buffer.extend(list(obj))
          else:
              self.buffer.extend(list(str(obj)))
      
  def append(self, obj):
      if isinstance(obj, StringType):
          self.buffer.extend(list(obj))
      else:
          self.buffer.extend(list(str(obj)))
      
  def charAt(self, index):
      return self.buffer[index]
  
  def __len__(self):
      return len(self.buffer)
  
  def __eq__(self, other):
      if type(self) != type(other):
          return False
      else:
          return (self.buffer == other.buffer)
  
  def __ne__(self, other):
      if type(self) != type(other):
          return True
      else:
          return (self.buffer != other.buffer)
        
  def clear(self):
      del self.buffer[0:len(self.buffer)]
  
  def __str__(self):
      return ''.join(self.buffer)
      
  def __repr__(self):
      return "'" + self.__str__() + "'"
  
  def substring(self, start, finish):
      return ''.join(self.buffer[start:finish])
      
  def __getitem__(self, index):
      return self.buffer[index]
      
  def __setitem__(self, index, c):
      if not(isinstance(c, StringType)):
          raise RuntimeError("Only single characters can be assigned")
      if not(len(c) == 1):
          raise RuntimeError("Only single characters can be assigned")
      self.buffer[index] = c
  
  def __iter__(self):
      return self.buffer
  
  def __getslice__(self, start, finish):
      return self.substring(start, finish)
      
  def reverse(self):
      self.buffer.reverse()
    
  def __contains__(self, c):
      if not(isinstance(c, StringType)):
          raise RuntimeError("Only single characters can be assigned")
      if not(len(c) == 1):
          raise RuntimeError("Only single characters can be assigned")
      return self.buffer.__contains__(c)
      
  def contains(self, c):
      self.__contains__(c)



############################# nodes.py ############################################## 

class Node(object):
    def __init__(self):
        if self.__class__ is Node:
            raise TypeError("Node class can not be instantiated.")
        self.parent = None

    def clone(self):
        abstract()
		
    def getparent(self):
        return self.parent

    def setparent(self, parent):
        self.parent = parent

    def removeChild(self, child):
    	abstract()
    	
    def replaceChild(self, oldChild, newChild):
    	abstract()

    def replaceBy(self, node):
        if (self.parent != None):
            self.parent.replaceChild(self, node)

    def toString(self, other):
        if isinstance(other, ListType):
            sb = StringBuffer()

            for node in other:
                s.append(node)

            return str(sb)
        
        if (other != None):
            return str(other)

        return ''
        
    def cloneNode(self, node):
        if(node != None):
            return node.clone()

        return None

    def cloneList(self, lst):
        clone = list()

        for node in lst:
            clone.append(node.clone())

        return clone

    def apply(self, analysis):
        abstract()

class Token(Node):
    def __init__(self):
        super(Token, self).__init__()
        self.text = None
        self.line = 0
        self.pos = 0

    def getText(self):
        return self.text

    def setText(self, text):
        self.text = text

    def getLine(self):
        return self.line

    def setLine(self, line):
        self.line = line

    def getPos(self):
        return self.pos

    def setPos(self, pos):
        self.pos = pos

    def __str__(self):
        return self.text + " "
    
    def removeChild(self, child):
        pass
      
    def replaceChild(self, oldChild,  newChild):
        pass
      

class TMin(Token):
    TokenIndex = 0
    
    def __init__(self, line=0, pos=0):
        super(TMin, self).__init__()
        super(TMin, self).setText("-")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TMin(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTMin(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TMin text.")


class TAnd(Token):
    TokenIndex = 1
    
    def __init__(self, line=0, pos=0):
        super(TAnd, self).__init__()
        super(TAnd, self).setText("AND")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TAnd(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTAnd(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TAnd text.")


class TOr(Token):
    TokenIndex = 2
    
    def __init__(self, line=0, pos=0):
        super(TOr, self).__init__()
        super(TOr, self).setText("OR")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TOr(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTOr(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TOr text.")


class TNot(Token):
    TokenIndex = 3
    
    def __init__(self, line=0, pos=0):
        super(TNot, self).__init__()
        super(TNot, self).setText("NOT")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TNot(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTNot(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TNot text.")


class TExclude(Token):
    TokenIndex = 4
    
    def __init__(self, line=0, pos=0):
        super(TExclude, self).__init__()
        super(TExclude, self).setText("EXCLUDE")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TExclude(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTExclude(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TExclude text.")


class TSelect(Token):
    TokenIndex = 5
    
    def __init__(self, line=0, pos=0):
        super(TSelect, self).__init__()
        super(TSelect, self).setText("SELECT")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TSelect(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTSelect(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TSelect text.")


class TFrom(Token):
    TokenIndex = 6
    
    def __init__(self, line=0, pos=0):
        super(TFrom, self).__init__()
        super(TFrom, self).setText("FROM")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TFrom(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTFrom(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TFrom text.")


class TAtleast(Token):
    TokenIndex = 7
    
    def __init__(self, line=0, pos=0):
        super(TAtleast, self).__init__()
        super(TAtleast, self).setText("ATLEAST")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TAtleast(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTAtleast(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TAtleast text.")


class TExactly(Token):
    TokenIndex = 8
    
    def __init__(self, line=0, pos=0):
        super(TExactly, self).__init__()
        super(TExactly, self).setText("EXACTLY")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TExactly(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTExactly(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TExactly text.")


class TNotmorethan(Token):
    TokenIndex = 9
    
    def __init__(self, line=0, pos=0):
        super(TNotmorethan, self).__init__()
        super(TNotmorethan, self).setText("NOTMORETHAN")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TNotmorethan(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTNotmorethan(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TNotmorethan text.")


class TScore(Token):
    TokenIndex = 10
    
    def __init__(self, line=0, pos=0):
        super(TScore, self).__init__()
        super(TScore, self).setText("SCORE")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TScore(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTScore(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TScore text.")


class TMax(Token):
    TokenIndex = 11
    
    def __init__(self, line=0, pos=0):
        super(TMax, self).__init__()
        super(TMax, self).setText("MAX")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TMax(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTMax(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TMax text.")


class TLPar(Token):
    TokenIndex = 12
    
    def __init__(self, line=0, pos=0):
        super(TLPar, self).__init__()
        super(TLPar, self).setText("(")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TLPar(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTLPar(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TLPar text.")


class TRPar(Token):
    TokenIndex = 13
    
    def __init__(self, line=0, pos=0):
        super(TRPar, self).__init__()
        super(TRPar, self).setText(")")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TRPar(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTRPar(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TRPar text.")


class TMapper(Token):
    TokenIndex = 14
    
    def __init__(self, line=0, pos=0):
        super(TMapper, self).__init__()
        super(TMapper, self).setText("=>")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TMapper(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTMapper(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TMapper text.")


class TComma(Token):
    TokenIndex = 15
    
    def __init__(self, line=0, pos=0):
        super(TComma, self).__init__()
        super(TComma, self).setText(",")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TComma(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTComma(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TComma text.")


class TBlank(Token):
    TokenIndex = -1
        
    def __init__(self, text, line=0, pos=0):
        super(TBlank, self).__init__()    
        self.setText(text)
        self.setLine(line)
        self.setPos(pos)
        
    def clone(self):
      return TBlank(self.getText(), self.getLine(), self.getPos())

    def apply(self, analysis):
       analysis.caseTBlank(self)
      
class TInteger(Token):
    TokenIndex = 16
    
    def __init__(self, text, line=0, pos=0):
        super(TInteger, self).__init__()    
        self.setText(text)
        self.setLine(line)
        self.setPos(pos)
        
    def clone(self):
      return TInteger(self.getText(), self.getLine(), self.getPos())

    def apply(self, analysis):
       analysis.caseTInteger(self)
      
class TFloat(Token):
    TokenIndex = 17
    
    def __init__(self, text, line=0, pos=0):
        super(TFloat, self).__init__()    
        self.setText(text)
        self.setLine(line)
        self.setPos(pos)
        
    def clone(self):
      return TFloat(self.getText(), self.getLine(), self.getPos())

    def apply(self, analysis):
       analysis.caseTFloat(self)
      
class TAminoAcid(Token):
    TokenIndex = 18
    
    def __init__(self, text, line=0, pos=0):
        super(TAminoAcid, self).__init__()    
        self.setText(text)
        self.setLine(line)
        self.setPos(pos)
        
    def clone(self):
      return TAminoAcid(self.getText(), self.getLine(), self.getPos())

    def apply(self, analysis):
       analysis.caseTAminoAcid(self)
      

class EOF(Token):
    TokenIndex = 19

    def __init__(self, line=0, pos=0):
        super(EOF, self).__init__()    
        self.setText("")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
        return EOF(self.getLine(), self.getPos())

    def apply(self, analysis):
        analysis.caseEOF(self)


class ALogicstatementStatement(Node):
    def __init__ (self, _booleancondition_=None):
        super(ALogicstatementStatement, self).__init__()
        self._booleancondition_ = None
        if (_booleancondition_ != None):
            self.setBooleancondition(_booleancondition_)

    def clone(self):
        return ALogicstatementStatement(self.cloneNode(self._booleancondition_))

    def apply(self, analysis):
        analysis.caseALogicstatementStatement(self)

    def getBooleancondition (self):
        return self._booleancondition_

    def setBooleancondition(self, node):
        if(self._booleancondition_ != None):
            self._booleancondition_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._booleancondition_ = node

    def __str__(self):
        return '' + self.toString(self._booleancondition_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._booleancondition_ == child):
            self._booleancondition_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._booleancondition_ == oldChild):
            self.setBooleancondition(newChild)
            return

class AScoreStatement(Node):
    def __init__ (self, _scorecondition_=None):
        super(AScoreStatement, self).__init__()
        self._scorecondition_ = None
        if (_scorecondition_ != None):
            self.setScorecondition(_scorecondition_)

    def clone(self):
        return AScoreStatement(self.cloneNode(self._scorecondition_))

    def apply(self, analysis):
        analysis.caseAScoreStatement(self)

    def getScorecondition (self):
        return self._scorecondition_

    def setScorecondition(self, node):
        if(self._scorecondition_ != None):
            self._scorecondition_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._scorecondition_ = node

    def __str__(self):
        return '' + self.toString(self._scorecondition_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._scorecondition_ == child):
            self._scorecondition_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._scorecondition_ == oldChild):
            self.setScorecondition(newChild)
            return

class ABooleancondition(Node):
    def __init__ (self, _condition_=None,_condition2_=None):
        super(ABooleancondition, self).__init__()
        self._condition_ = None
        self._condition2_ = list()
        if (_condition_ != None):
            self.setCondition(_condition_)
        if (_condition2_ != None):
            self._condition2_.extend(_condition2_)

    def clone(self):
        return ABooleancondition(self.cloneNode(self._condition_),self.cloneList(self._condition2_))

    def apply(self, analysis):
        analysis.caseABooleancondition(self)

    def getCondition (self):
        return self._condition_

    def setCondition(self, node):
        if(self._condition_ != None):
            self._condition_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._condition_ = node
    def getCondition2(self):
        return self._condition2_

    def setCondition2(self, lst):
        del self._condition2_[0:len(self._condition2_)]
        self._condition2_.extend(lst)
        

    def __str__(self):
        return '' + self.toString(self._condition_)+ self.toString(self._condition2_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._condition_ == child):
            self._condition_ = None
            return
        if child in self._condition2_:
            self._condition2_.remove(child)
            return

    def replaceChild(self, oldChild, newChild):
        if (self._condition_ == oldChild):
            self.setCondition(newChild)
            return
        for i in range(self._condition2_):
            if (self._condition2_[i] == oldChild):
                if (newChild != None):
                    self._condition2_[i] = newChild
                    oldChild.setparent(None)
                    return

                del self._condition2_[i]
                oldChild.setparent(None)
                return

class AStatementCondition(Node):
    def __init__ (self, _l_par_=None,_booleancondition_=None,_r_par_=None):
        super(AStatementCondition, self).__init__()
        self._l_par_ = None
        self._booleancondition_ = None
        self._r_par_ = None
        if (_l_par_ != None):
            self.setLPar(_l_par_)
        if (_booleancondition_ != None):
            self.setBooleancondition(_booleancondition_)
        if (_r_par_ != None):
            self.setRPar(_r_par_)

    def clone(self):
        return AStatementCondition(self.cloneNode(self._l_par_),self.cloneNode(self._booleancondition_),self.cloneNode(self._r_par_))

    def apply(self, analysis):
        analysis.caseAStatementCondition(self)

    def getLPar (self):
        return self._l_par_

    def setLPar(self, node):
        if(self._l_par_ != None):
            self._l_par_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._l_par_ = node
    def getBooleancondition (self):
        return self._booleancondition_

    def setBooleancondition(self, node):
        if(self._booleancondition_ != None):
            self._booleancondition_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._booleancondition_ = node
    def getRPar (self):
        return self._r_par_

    def setRPar(self, node):
        if(self._r_par_ != None):
            self._r_par_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._r_par_ = node

    def __str__(self):
        return '' + self.toString(self._l_par_)+ self.toString(self._booleancondition_)+ self.toString(self._r_par_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._l_par_ == child):
            self._l_par_ = None
            return
        if (self._booleancondition_ == child):
            self._booleancondition_ = None
            return
        if (self._r_par_ == child):
            self._r_par_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._l_par_ == oldChild):
            self.setLPar(newChild)
            return
        if (self._booleancondition_ == oldChild):
            self.setBooleancondition(newChild)
            return
        if (self._r_par_ == oldChild):
            self.setRPar(newChild)
            return

class AResidueCondition(Node):
    def __init__ (self, _residue_=None):
        super(AResidueCondition, self).__init__()
        self._residue_ = None
        if (_residue_ != None):
            self.setResidue(_residue_)

    def clone(self):
        return AResidueCondition(self.cloneNode(self._residue_))

    def apply(self, analysis):
        analysis.caseAResidueCondition(self)

    def getResidue (self):
        return self._residue_

    def setResidue(self, node):
        if(self._residue_ != None):
            self._residue_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._residue_ = node

    def __str__(self):
        return '' + self.toString(self._residue_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._residue_ == child):
            self._residue_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._residue_ == oldChild):
            self.setResidue(newChild)
            return

class AExcludeCondition(Node):
    def __init__ (self, _excludestatement_=None):
        super(AExcludeCondition, self).__init__()
        self._excludestatement_ = None
        if (_excludestatement_ != None):
            self.setExcludestatement(_excludestatement_)

    def clone(self):
        return AExcludeCondition(self.cloneNode(self._excludestatement_))

    def apply(self, analysis):
        analysis.caseAExcludeCondition(self)

    def getExcludestatement (self):
        return self._excludestatement_

    def setExcludestatement(self, node):
        if(self._excludestatement_ != None):
            self._excludestatement_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._excludestatement_ = node

    def __str__(self):
        return '' + self.toString(self._excludestatement_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._excludestatement_ == child):
            self._excludestatement_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._excludestatement_ == oldChild):
            self.setExcludestatement(newChild)
            return

class ASelectCondition(Node):
    def __init__ (self, _selectstatement_=None):
        super(ASelectCondition, self).__init__()
        self._selectstatement_ = None
        if (_selectstatement_ != None):
            self.setSelectstatement(_selectstatement_)

    def clone(self):
        return ASelectCondition(self.cloneNode(self._selectstatement_))

    def apply(self, analysis):
        analysis.caseASelectCondition(self)

    def getSelectstatement (self):
        return self._selectstatement_

    def setSelectstatement(self, node):
        if(self._selectstatement_ != None):
            self._selectstatement_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._selectstatement_ = node

    def __str__(self):
        return '' + self.toString(self._selectstatement_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._selectstatement_ == child):
            self._selectstatement_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._selectstatement_ == oldChild):
            self.setSelectstatement(newChild)
            return

class ACondition2(Node):
    def __init__ (self, _logicsymbol_=None,_condition_=None):
        super(ACondition2, self).__init__()
        self._logicsymbol_ = None
        self._condition_ = None
        if (_logicsymbol_ != None):
            self.setLogicsymbol(_logicsymbol_)
        if (_condition_ != None):
            self.setCondition(_condition_)

    def clone(self):
        return ACondition2(self.cloneNode(self._logicsymbol_),self.cloneNode(self._condition_))

    def apply(self, analysis):
        analysis.caseACondition2(self)

    def getLogicsymbol (self):
        return self._logicsymbol_

    def setLogicsymbol(self, node):
        if(self._logicsymbol_ != None):
            self._logicsymbol_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._logicsymbol_ = node
    def getCondition (self):
        return self._condition_

    def setCondition(self, node):
        if(self._condition_ != None):
            self._condition_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._condition_ = node

    def __str__(self):
        return '' + self.toString(self._logicsymbol_)+ self.toString(self._condition_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._logicsymbol_ == child):
            self._logicsymbol_ = None
            return
        if (self._condition_ == child):
            self._condition_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._logicsymbol_ == oldChild):
            self.setLogicsymbol(newChild)
            return
        if (self._condition_ == oldChild):
            self.setCondition(newChild)
            return

class AAndLogicsymbol(Node):
    def __init__ (self, _and_=None):
        super(AAndLogicsymbol, self).__init__()
        self._and_ = None
        if (_and_ != None):
            self.setAnd(_and_)

    def clone(self):
        return AAndLogicsymbol(self.cloneNode(self._and_))

    def apply(self, analysis):
        analysis.caseAAndLogicsymbol(self)

    def getAnd (self):
        return self._and_

    def setAnd(self, node):
        if(self._and_ != None):
            self._and_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._and_ = node

    def __str__(self):
        return '' + self.toString(self._and_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._and_ == child):
            self._and_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._and_ == oldChild):
            self.setAnd(newChild)
            return

class AOrLogicsymbol(Node):
    def __init__ (self, _or_=None):
        super(AOrLogicsymbol, self).__init__()
        self._or_ = None
        if (_or_ != None):
            self.setOr(_or_)

    def clone(self):
        return AOrLogicsymbol(self.cloneNode(self._or_))

    def apply(self, analysis):
        analysis.caseAOrLogicsymbol(self)

    def getOr (self):
        return self._or_

    def setOr(self, node):
        if(self._or_ != None):
            self._or_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._or_ = node

    def __str__(self):
        return '' + self.toString(self._or_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._or_ == child):
            self._or_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._or_ == oldChild):
            self.setOr(newChild)
            return

class AResidueResidue(Node):
    def __init__ (self, _originalaminoacid_=None,_integer_=None,_mutatedaminoacid_=None):
        super(AResidueResidue, self).__init__()
        self._originalaminoacid_ = None
        self._integer_ = None
        self._mutatedaminoacid_ = list()
        if (_originalaminoacid_ != None):
            self.setOriginalaminoacid(_originalaminoacid_)
        if (_integer_ != None):
            self.setInteger(_integer_)
        if (_mutatedaminoacid_ != None):
            self._mutatedaminoacid_.extend(_mutatedaminoacid_)

    def clone(self):
        return AResidueResidue(self.cloneNode(self._originalaminoacid_),self.cloneNode(self._integer_),self.cloneList(self._mutatedaminoacid_))

    def apply(self, analysis):
        analysis.caseAResidueResidue(self)

    def getOriginalaminoacid (self):
        return self._originalaminoacid_

    def setOriginalaminoacid(self, node):
        if(self._originalaminoacid_ != None):
            self._originalaminoacid_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._originalaminoacid_ = node
    def getInteger (self):
        return self._integer_

    def setInteger(self, node):
        if(self._integer_ != None):
            self._integer_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._integer_ = node
    def getMutatedaminoacid(self):
        return self._mutatedaminoacid_

    def setMutatedaminoacid(self, lst):
        del self._mutatedaminoacid_[0:len(self._mutatedaminoacid_)]
        self._mutatedaminoacid_.extend(lst)
        

    def __str__(self):
        return '' + self.toString(self._originalaminoacid_)+ self.toString(self._integer_)+ self.toString(self._mutatedaminoacid_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._originalaminoacid_ == child):
            self._originalaminoacid_ = None
            return
        if (self._integer_ == child):
            self._integer_ = None
            return
        if child in self._mutatedaminoacid_:
            self._mutatedaminoacid_.remove(child)
            return

    def replaceChild(self, oldChild, newChild):
        if (self._originalaminoacid_ == oldChild):
            self.setOriginalaminoacid(newChild)
            return
        if (self._integer_ == oldChild):
            self.setInteger(newChild)
            return
        for i in range(self._mutatedaminoacid_):
            if (self._mutatedaminoacid_[i] == oldChild):
                if (newChild != None):
                    self._mutatedaminoacid_[i] = newChild
                    oldChild.setparent(None)
                    return

                del self._mutatedaminoacid_[i]
                oldChild.setparent(None)
                return

class AResiduenotResidue(Node):
    def __init__ (self, _not_=None,_originalaminoacid_=None,_integer_=None,_mutatedaminoacid_=None):
        super(AResiduenotResidue, self).__init__()
        self._not_ = None
        self._originalaminoacid_ = None
        self._integer_ = None
        self._mutatedaminoacid_ = list()
        if (_not_ != None):
            self.setNot(_not_)
        if (_originalaminoacid_ != None):
            self.setOriginalaminoacid(_originalaminoacid_)
        if (_integer_ != None):
            self.setInteger(_integer_)
        if (_mutatedaminoacid_ != None):
            self._mutatedaminoacid_.extend(_mutatedaminoacid_)

    def clone(self):
        return AResiduenotResidue(self.cloneNode(self._not_),self.cloneNode(self._originalaminoacid_),self.cloneNode(self._integer_),self.cloneList(self._mutatedaminoacid_))

    def apply(self, analysis):
        analysis.caseAResiduenotResidue(self)

    def getNot (self):
        return self._not_

    def setNot(self, node):
        if(self._not_ != None):
            self._not_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._not_ = node
    def getOriginalaminoacid (self):
        return self._originalaminoacid_

    def setOriginalaminoacid(self, node):
        if(self._originalaminoacid_ != None):
            self._originalaminoacid_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._originalaminoacid_ = node
    def getInteger (self):
        return self._integer_

    def setInteger(self, node):
        if(self._integer_ != None):
            self._integer_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._integer_ = node
    def getMutatedaminoacid(self):
        return self._mutatedaminoacid_

    def setMutatedaminoacid(self, lst):
        del self._mutatedaminoacid_[0:len(self._mutatedaminoacid_)]
        self._mutatedaminoacid_.extend(lst)
        

    def __str__(self):
        return '' + self.toString(self._not_)+ self.toString(self._originalaminoacid_)+ self.toString(self._integer_)+ self.toString(self._mutatedaminoacid_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._not_ == child):
            self._not_ = None
            return
        if (self._originalaminoacid_ == child):
            self._originalaminoacid_ = None
            return
        if (self._integer_ == child):
            self._integer_ = None
            return
        if child in self._mutatedaminoacid_:
            self._mutatedaminoacid_.remove(child)
            return

    def replaceChild(self, oldChild, newChild):
        if (self._not_ == oldChild):
            self.setNot(newChild)
            return
        if (self._originalaminoacid_ == oldChild):
            self.setOriginalaminoacid(newChild)
            return
        if (self._integer_ == oldChild):
            self.setInteger(newChild)
            return
        for i in range(self._mutatedaminoacid_):
            if (self._mutatedaminoacid_[i] == oldChild):
                if (newChild != None):
                    self._mutatedaminoacid_[i] = newChild
                    oldChild.setparent(None)
                    return

                del self._mutatedaminoacid_[i]
                oldChild.setparent(None)
                return

class AResidueinvertResidue(Node):
    def __init__ (self, _originalaminoacid_=None,_integer_=None,_l_par_=None,_not_=None,_mutatedaminoacid_=None,_r_par_=None):
        super(AResidueinvertResidue, self).__init__()
        self._originalaminoacid_ = None
        self._integer_ = None
        self._l_par_ = None
        self._not_ = None
        self._mutatedaminoacid_ = list()
        self._r_par_ = None
        if (_originalaminoacid_ != None):
            self.setOriginalaminoacid(_originalaminoacid_)
        if (_integer_ != None):
            self.setInteger(_integer_)
        if (_l_par_ != None):
            self.setLPar(_l_par_)
        if (_not_ != None):
            self.setNot(_not_)
        if (_mutatedaminoacid_ != None):
            self._mutatedaminoacid_.extend(_mutatedaminoacid_)
        if (_r_par_ != None):
            self.setRPar(_r_par_)

    def clone(self):
        return AResidueinvertResidue(self.cloneNode(self._originalaminoacid_),self.cloneNode(self._integer_),self.cloneNode(self._l_par_),self.cloneNode(self._not_),self.cloneList(self._mutatedaminoacid_),self.cloneNode(self._r_par_))

    def apply(self, analysis):
        analysis.caseAResidueinvertResidue(self)

    def getOriginalaminoacid (self):
        return self._originalaminoacid_

    def setOriginalaminoacid(self, node):
        if(self._originalaminoacid_ != None):
            self._originalaminoacid_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._originalaminoacid_ = node
    def getInteger (self):
        return self._integer_

    def setInteger(self, node):
        if(self._integer_ != None):
            self._integer_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._integer_ = node
    def getLPar (self):
        return self._l_par_

    def setLPar(self, node):
        if(self._l_par_ != None):
            self._l_par_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._l_par_ = node
    def getNot (self):
        return self._not_

    def setNot(self, node):
        if(self._not_ != None):
            self._not_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._not_ = node
    def getMutatedaminoacid(self):
        return self._mutatedaminoacid_

    def setMutatedaminoacid(self, lst):
        del self._mutatedaminoacid_[0:len(self._mutatedaminoacid_)]
        self._mutatedaminoacid_.extend(lst)
        
    def getRPar (self):
        return self._r_par_

    def setRPar(self, node):
        if(self._r_par_ != None):
            self._r_par_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._r_par_ = node

    def __str__(self):
        return '' + self.toString(self._originalaminoacid_)+ self.toString(self._integer_)+ self.toString(self._l_par_)+ self.toString(self._not_)+ self.toString(self._mutatedaminoacid_)+ self.toString(self._r_par_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._originalaminoacid_ == child):
            self._originalaminoacid_ = None
            return
        if (self._integer_ == child):
            self._integer_ = None
            return
        if (self._l_par_ == child):
            self._l_par_ = None
            return
        if (self._not_ == child):
            self._not_ = None
            return
        if child in self._mutatedaminoacid_:
            self._mutatedaminoacid_.remove(child)
            return
        if (self._r_par_ == child):
            self._r_par_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._originalaminoacid_ == oldChild):
            self.setOriginalaminoacid(newChild)
            return
        if (self._integer_ == oldChild):
            self.setInteger(newChild)
            return
        if (self._l_par_ == oldChild):
            self.setLPar(newChild)
            return
        if (self._not_ == oldChild):
            self.setNot(newChild)
            return
        for i in range(self._mutatedaminoacid_):
            if (self._mutatedaminoacid_[i] == oldChild):
                if (newChild != None):
                    self._mutatedaminoacid_[i] = newChild
                    oldChild.setparent(None)
                    return

                del self._mutatedaminoacid_[i]
                oldChild.setparent(None)
                return
        if (self._r_par_ == oldChild):
            self.setRPar(newChild)
            return

class AExcludestatement(Node):
    def __init__ (self, _exclude_=None,_residue_=None):
        super(AExcludestatement, self).__init__()
        self._exclude_ = None
        self._residue_ = None
        if (_exclude_ != None):
            self.setExclude(_exclude_)
        if (_residue_ != None):
            self.setResidue(_residue_)

    def clone(self):
        return AExcludestatement(self.cloneNode(self._exclude_),self.cloneNode(self._residue_))

    def apply(self, analysis):
        analysis.caseAExcludestatement(self)

    def getExclude (self):
        return self._exclude_

    def setExclude(self, node):
        if(self._exclude_ != None):
            self._exclude_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._exclude_ = node
    def getResidue (self):
        return self._residue_

    def setResidue(self, node):
        if(self._residue_ != None):
            self._residue_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._residue_ = node

    def __str__(self):
        return '' + self.toString(self._exclude_)+ self.toString(self._residue_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._exclude_ == child):
            self._exclude_ = None
            return
        if (self._residue_ == child):
            self._residue_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._exclude_ == oldChild):
            self.setExclude(newChild)
            return
        if (self._residue_ == oldChild):
            self.setResidue(newChild)
            return

class ASelectstatement(Node):
    def __init__ (self, _select_=None,_selectstatement2_=None):
        super(ASelectstatement, self).__init__()
        self._select_ = None
        self._selectstatement2_ = None
        if (_select_ != None):
            self.setSelect(_select_)
        if (_selectstatement2_ != None):
            self.setSelectstatement2(_selectstatement2_)

    def clone(self):
        return ASelectstatement(self.cloneNode(self._select_),self.cloneNode(self._selectstatement2_))

    def apply(self, analysis):
        analysis.caseASelectstatement(self)

    def getSelect (self):
        return self._select_

    def setSelect(self, node):
        if(self._select_ != None):
            self._select_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._select_ = node
    def getSelectstatement2 (self):
        return self._selectstatement2_

    def setSelectstatement2(self, node):
        if(self._selectstatement2_ != None):
            self._selectstatement2_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._selectstatement2_ = node

    def __str__(self):
        return '' + self.toString(self._select_)+ self.toString(self._selectstatement2_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._select_ == child):
            self._select_ = None
            return
        if (self._selectstatement2_ == child):
            self._selectstatement2_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._select_ == oldChild):
            self.setSelect(newChild)
            return
        if (self._selectstatement2_ == oldChild):
            self.setSelectstatement2(newChild)
            return

class AExactlySelectstatement2(Node):
    def __init__ (self, _exactly_=None,_integer_=None,_from_=None,_l_par_=None,_selectlist_=None,_r_par_=None):
        super(AExactlySelectstatement2, self).__init__()
        self._exactly_ = None
        self._integer_ = None
        self._from_ = None
        self._l_par_ = None
        self._selectlist_ = None
        self._r_par_ = None
        if (_exactly_ != None):
            self.setExactly(_exactly_)
        if (_integer_ != None):
            self.setInteger(_integer_)
        if (_from_ != None):
            self.setFrom(_from_)
        if (_l_par_ != None):
            self.setLPar(_l_par_)
        if (_selectlist_ != None):
            self.setSelectlist(_selectlist_)
        if (_r_par_ != None):
            self.setRPar(_r_par_)

    def clone(self):
        return AExactlySelectstatement2(self.cloneNode(self._exactly_),self.cloneNode(self._integer_),self.cloneNode(self._from_),self.cloneNode(self._l_par_),self.cloneNode(self._selectlist_),self.cloneNode(self._r_par_))

    def apply(self, analysis):
        analysis.caseAExactlySelectstatement2(self)

    def getExactly (self):
        return self._exactly_

    def setExactly(self, node):
        if(self._exactly_ != None):
            self._exactly_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._exactly_ = node
    def getInteger (self):
        return self._integer_

    def setInteger(self, node):
        if(self._integer_ != None):
            self._integer_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._integer_ = node
    def getFrom (self):
        return self._from_

    def setFrom(self, node):
        if(self._from_ != None):
            self._from_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._from_ = node
    def getLPar (self):
        return self._l_par_

    def setLPar(self, node):
        if(self._l_par_ != None):
            self._l_par_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._l_par_ = node
    def getSelectlist (self):
        return self._selectlist_

    def setSelectlist(self, node):
        if(self._selectlist_ != None):
            self._selectlist_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._selectlist_ = node
    def getRPar (self):
        return self._r_par_

    def setRPar(self, node):
        if(self._r_par_ != None):
            self._r_par_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._r_par_ = node

    def __str__(self):
        return '' + self.toString(self._exactly_)+ self.toString(self._integer_)+ self.toString(self._from_)+ self.toString(self._l_par_)+ self.toString(self._selectlist_)+ self.toString(self._r_par_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._exactly_ == child):
            self._exactly_ = None
            return
        if (self._integer_ == child):
            self._integer_ = None
            return
        if (self._from_ == child):
            self._from_ = None
            return
        if (self._l_par_ == child):
            self._l_par_ = None
            return
        if (self._selectlist_ == child):
            self._selectlist_ = None
            return
        if (self._r_par_ == child):
            self._r_par_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._exactly_ == oldChild):
            self.setExactly(newChild)
            return
        if (self._integer_ == oldChild):
            self.setInteger(newChild)
            return
        if (self._from_ == oldChild):
            self.setFrom(newChild)
            return
        if (self._l_par_ == oldChild):
            self.setLPar(newChild)
            return
        if (self._selectlist_ == oldChild):
            self.setSelectlist(newChild)
            return
        if (self._r_par_ == oldChild):
            self.setRPar(newChild)
            return

class AAtleastSelectstatement2(Node):
    def __init__ (self, _atleast_=None,_integer_=None,_from_=None,_l_par_=None,_selectlist_=None,_r_par_=None):
        super(AAtleastSelectstatement2, self).__init__()
        self._atleast_ = None
        self._integer_ = None
        self._from_ = None
        self._l_par_ = None
        self._selectlist_ = None
        self._r_par_ = None
        if (_atleast_ != None):
            self.setAtleast(_atleast_)
        if (_integer_ != None):
            self.setInteger(_integer_)
        if (_from_ != None):
            self.setFrom(_from_)
        if (_l_par_ != None):
            self.setLPar(_l_par_)
        if (_selectlist_ != None):
            self.setSelectlist(_selectlist_)
        if (_r_par_ != None):
            self.setRPar(_r_par_)

    def clone(self):
        return AAtleastSelectstatement2(self.cloneNode(self._atleast_),self.cloneNode(self._integer_),self.cloneNode(self._from_),self.cloneNode(self._l_par_),self.cloneNode(self._selectlist_),self.cloneNode(self._r_par_))

    def apply(self, analysis):
        analysis.caseAAtleastSelectstatement2(self)

    def getAtleast (self):
        return self._atleast_

    def setAtleast(self, node):
        if(self._atleast_ != None):
            self._atleast_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._atleast_ = node
    def getInteger (self):
        return self._integer_

    def setInteger(self, node):
        if(self._integer_ != None):
            self._integer_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._integer_ = node
    def getFrom (self):
        return self._from_

    def setFrom(self, node):
        if(self._from_ != None):
            self._from_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._from_ = node
    def getLPar (self):
        return self._l_par_

    def setLPar(self, node):
        if(self._l_par_ != None):
            self._l_par_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._l_par_ = node
    def getSelectlist (self):
        return self._selectlist_

    def setSelectlist(self, node):
        if(self._selectlist_ != None):
            self._selectlist_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._selectlist_ = node
    def getRPar (self):
        return self._r_par_

    def setRPar(self, node):
        if(self._r_par_ != None):
            self._r_par_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._r_par_ = node

    def __str__(self):
        return '' + self.toString(self._atleast_)+ self.toString(self._integer_)+ self.toString(self._from_)+ self.toString(self._l_par_)+ self.toString(self._selectlist_)+ self.toString(self._r_par_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._atleast_ == child):
            self._atleast_ = None
            return
        if (self._integer_ == child):
            self._integer_ = None
            return
        if (self._from_ == child):
            self._from_ = None
            return
        if (self._l_par_ == child):
            self._l_par_ = None
            return
        if (self._selectlist_ == child):
            self._selectlist_ = None
            return
        if (self._r_par_ == child):
            self._r_par_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._atleast_ == oldChild):
            self.setAtleast(newChild)
            return
        if (self._integer_ == oldChild):
            self.setInteger(newChild)
            return
        if (self._from_ == oldChild):
            self.setFrom(newChild)
            return
        if (self._l_par_ == oldChild):
            self.setLPar(newChild)
            return
        if (self._selectlist_ == oldChild):
            self.setSelectlist(newChild)
            return
        if (self._r_par_ == oldChild):
            self.setRPar(newChild)
            return

class ANotmorethanSelectstatement2(Node):
    def __init__ (self, _notmorethan_=None,_integer_=None,_from_=None,_l_par_=None,_selectlist_=None,_r_par_=None):
        super(ANotmorethanSelectstatement2, self).__init__()
        self._notmorethan_ = None
        self._integer_ = None
        self._from_ = None
        self._l_par_ = None
        self._selectlist_ = None
        self._r_par_ = None
        if (_notmorethan_ != None):
            self.setNotmorethan(_notmorethan_)
        if (_integer_ != None):
            self.setInteger(_integer_)
        if (_from_ != None):
            self.setFrom(_from_)
        if (_l_par_ != None):
            self.setLPar(_l_par_)
        if (_selectlist_ != None):
            self.setSelectlist(_selectlist_)
        if (_r_par_ != None):
            self.setRPar(_r_par_)

    def clone(self):
        return ANotmorethanSelectstatement2(self.cloneNode(self._notmorethan_),self.cloneNode(self._integer_),self.cloneNode(self._from_),self.cloneNode(self._l_par_),self.cloneNode(self._selectlist_),self.cloneNode(self._r_par_))

    def apply(self, analysis):
        analysis.caseANotmorethanSelectstatement2(self)

    def getNotmorethan (self):
        return self._notmorethan_

    def setNotmorethan(self, node):
        if(self._notmorethan_ != None):
            self._notmorethan_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._notmorethan_ = node
    def getInteger (self):
        return self._integer_

    def setInteger(self, node):
        if(self._integer_ != None):
            self._integer_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._integer_ = node
    def getFrom (self):
        return self._from_

    def setFrom(self, node):
        if(self._from_ != None):
            self._from_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._from_ = node
    def getLPar (self):
        return self._l_par_

    def setLPar(self, node):
        if(self._l_par_ != None):
            self._l_par_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._l_par_ = node
    def getSelectlist (self):
        return self._selectlist_

    def setSelectlist(self, node):
        if(self._selectlist_ != None):
            self._selectlist_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._selectlist_ = node
    def getRPar (self):
        return self._r_par_

    def setRPar(self, node):
        if(self._r_par_ != None):
            self._r_par_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._r_par_ = node

    def __str__(self):
        return '' + self.toString(self._notmorethan_)+ self.toString(self._integer_)+ self.toString(self._from_)+ self.toString(self._l_par_)+ self.toString(self._selectlist_)+ self.toString(self._r_par_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._notmorethan_ == child):
            self._notmorethan_ = None
            return
        if (self._integer_ == child):
            self._integer_ = None
            return
        if (self._from_ == child):
            self._from_ = None
            return
        if (self._l_par_ == child):
            self._l_par_ = None
            return
        if (self._selectlist_ == child):
            self._selectlist_ = None
            return
        if (self._r_par_ == child):
            self._r_par_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._notmorethan_ == oldChild):
            self.setNotmorethan(newChild)
            return
        if (self._integer_ == oldChild):
            self.setInteger(newChild)
            return
        if (self._from_ == oldChild):
            self.setFrom(newChild)
            return
        if (self._l_par_ == oldChild):
            self.setLPar(newChild)
            return
        if (self._selectlist_ == oldChild):
            self.setSelectlist(newChild)
            return
        if (self._r_par_ == oldChild):
            self.setRPar(newChild)
            return

class AAtleastnotmorethanSelectstatement2(Node):
    def __init__ (self, _atleast_=None,_atleastnumber_=None,_logicsymbol_=None,_notmorethan_=None,_notmorethannumber_=None,_from_=None,_l_par_=None,_selectlist_=None,_r_par_=None):
        super(AAtleastnotmorethanSelectstatement2, self).__init__()
        self._atleast_ = None
        self._atleastnumber_ = None
        self._logicsymbol_ = None
        self._notmorethan_ = None
        self._notmorethannumber_ = None
        self._from_ = None
        self._l_par_ = None
        self._selectlist_ = None
        self._r_par_ = None
        if (_atleast_ != None):
            self.setAtleast(_atleast_)
        if (_atleastnumber_ != None):
            self.setAtleastnumber(_atleastnumber_)
        if (_logicsymbol_ != None):
            self.setLogicsymbol(_logicsymbol_)
        if (_notmorethan_ != None):
            self.setNotmorethan(_notmorethan_)
        if (_notmorethannumber_ != None):
            self.setNotmorethannumber(_notmorethannumber_)
        if (_from_ != None):
            self.setFrom(_from_)
        if (_l_par_ != None):
            self.setLPar(_l_par_)
        if (_selectlist_ != None):
            self.setSelectlist(_selectlist_)
        if (_r_par_ != None):
            self.setRPar(_r_par_)

    def clone(self):
        return AAtleastnotmorethanSelectstatement2(self.cloneNode(self._atleast_),self.cloneNode(self._atleastnumber_),self.cloneNode(self._logicsymbol_),self.cloneNode(self._notmorethan_),self.cloneNode(self._notmorethannumber_),self.cloneNode(self._from_),self.cloneNode(self._l_par_),self.cloneNode(self._selectlist_),self.cloneNode(self._r_par_))

    def apply(self, analysis):
        analysis.caseAAtleastnotmorethanSelectstatement2(self)

    def getAtleast (self):
        return self._atleast_

    def setAtleast(self, node):
        if(self._atleast_ != None):
            self._atleast_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._atleast_ = node
    def getAtleastnumber (self):
        return self._atleastnumber_

    def setAtleastnumber(self, node):
        if(self._atleastnumber_ != None):
            self._atleastnumber_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._atleastnumber_ = node
    def getLogicsymbol (self):
        return self._logicsymbol_

    def setLogicsymbol(self, node):
        if(self._logicsymbol_ != None):
            self._logicsymbol_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._logicsymbol_ = node
    def getNotmorethan (self):
        return self._notmorethan_

    def setNotmorethan(self, node):
        if(self._notmorethan_ != None):
            self._notmorethan_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._notmorethan_ = node
    def getNotmorethannumber (self):
        return self._notmorethannumber_

    def setNotmorethannumber(self, node):
        if(self._notmorethannumber_ != None):
            self._notmorethannumber_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._notmorethannumber_ = node
    def getFrom (self):
        return self._from_

    def setFrom(self, node):
        if(self._from_ != None):
            self._from_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._from_ = node
    def getLPar (self):
        return self._l_par_

    def setLPar(self, node):
        if(self._l_par_ != None):
            self._l_par_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._l_par_ = node
    def getSelectlist (self):
        return self._selectlist_

    def setSelectlist(self, node):
        if(self._selectlist_ != None):
            self._selectlist_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._selectlist_ = node
    def getRPar (self):
        return self._r_par_

    def setRPar(self, node):
        if(self._r_par_ != None):
            self._r_par_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._r_par_ = node

    def __str__(self):
        return '' + self.toString(self._atleast_)+ self.toString(self._atleastnumber_)+ self.toString(self._logicsymbol_)+ self.toString(self._notmorethan_)+ self.toString(self._notmorethannumber_)+ self.toString(self._from_)+ self.toString(self._l_par_)+ self.toString(self._selectlist_)+ self.toString(self._r_par_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._atleast_ == child):
            self._atleast_ = None
            return
        if (self._atleastnumber_ == child):
            self._atleastnumber_ = None
            return
        if (self._logicsymbol_ == child):
            self._logicsymbol_ = None
            return
        if (self._notmorethan_ == child):
            self._notmorethan_ = None
            return
        if (self._notmorethannumber_ == child):
            self._notmorethannumber_ = None
            return
        if (self._from_ == child):
            self._from_ = None
            return
        if (self._l_par_ == child):
            self._l_par_ = None
            return
        if (self._selectlist_ == child):
            self._selectlist_ = None
            return
        if (self._r_par_ == child):
            self._r_par_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._atleast_ == oldChild):
            self.setAtleast(newChild)
            return
        if (self._atleastnumber_ == oldChild):
            self.setAtleastnumber(newChild)
            return
        if (self._logicsymbol_ == oldChild):
            self.setLogicsymbol(newChild)
            return
        if (self._notmorethan_ == oldChild):
            self.setNotmorethan(newChild)
            return
        if (self._notmorethannumber_ == oldChild):
            self.setNotmorethannumber(newChild)
            return
        if (self._from_ == oldChild):
            self.setFrom(newChild)
            return
        if (self._l_par_ == oldChild):
            self.setLPar(newChild)
            return
        if (self._selectlist_ == oldChild):
            self.setSelectlist(newChild)
            return
        if (self._r_par_ == oldChild):
            self.setRPar(newChild)
            return

class ASelectlist(Node):
    def __init__ (self, _residue_=None,_listitems_=None):
        super(ASelectlist, self).__init__()
        self._residue_ = None
        self._listitems_ = list()
        if (_residue_ != None):
            self.setResidue(_residue_)
        if (_listitems_ != None):
            self._listitems_.extend(_listitems_)

    def clone(self):
        return ASelectlist(self.cloneNode(self._residue_),self.cloneList(self._listitems_))

    def apply(self, analysis):
        analysis.caseASelectlist(self)

    def getResidue (self):
        return self._residue_

    def setResidue(self, node):
        if(self._residue_ != None):
            self._residue_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._residue_ = node
    def getListitems(self):
        return self._listitems_

    def setListitems(self, lst):
        del self._listitems_[0:len(self._listitems_)]
        self._listitems_.extend(lst)
        

    def __str__(self):
        return '' + self.toString(self._residue_)+ self.toString(self._listitems_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._residue_ == child):
            self._residue_ = None
            return
        if child in self._listitems_:
            self._listitems_.remove(child)
            return

    def replaceChild(self, oldChild, newChild):
        if (self._residue_ == oldChild):
            self.setResidue(newChild)
            return
        for i in range(self._listitems_):
            if (self._listitems_[i] == oldChild):
                if (newChild != None):
                    self._listitems_[i] = newChild
                    oldChild.setparent(None)
                    return

                del self._listitems_[i]
                oldChild.setparent(None)
                return

class AListitems(Node):
    def __init__ (self, _comma_=None,_residue_=None):
        super(AListitems, self).__init__()
        self._comma_ = None
        self._residue_ = None
        if (_comma_ != None):
            self.setComma(_comma_)
        if (_residue_ != None):
            self.setResidue(_residue_)

    def clone(self):
        return AListitems(self.cloneNode(self._comma_),self.cloneNode(self._residue_))

    def apply(self, analysis):
        analysis.caseAListitems(self)

    def getComma (self):
        return self._comma_

    def setComma(self, node):
        if(self._comma_ != None):
            self._comma_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._comma_ = node
    def getResidue (self):
        return self._residue_

    def setResidue(self, node):
        if(self._residue_ != None):
            self._residue_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._residue_ = node

    def __str__(self):
        return '' + self.toString(self._comma_)+ self.toString(self._residue_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._comma_ == child):
            self._comma_ = None
            return
        if (self._residue_ == child):
            self._residue_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._comma_ == oldChild):
            self.setComma(newChild)
            return
        if (self._residue_ == oldChild):
            self.setResidue(newChild)
            return

class AScorecondition(Node):
    def __init__ (self, _score_=None,_from_=None,_l_par_=None,_scorelist_=None,_r_par_=None):
        super(AScorecondition, self).__init__()
        self._score_ = None
        self._from_ = None
        self._l_par_ = None
        self._scorelist_ = None
        self._r_par_ = None
        if (_score_ != None):
            self.setScore(_score_)
        if (_from_ != None):
            self.setFrom(_from_)
        if (_l_par_ != None):
            self.setLPar(_l_par_)
        if (_scorelist_ != None):
            self.setScorelist(_scorelist_)
        if (_r_par_ != None):
            self.setRPar(_r_par_)

    def clone(self):
        return AScorecondition(self.cloneNode(self._score_),self.cloneNode(self._from_),self.cloneNode(self._l_par_),self.cloneNode(self._scorelist_),self.cloneNode(self._r_par_))

    def apply(self, analysis):
        analysis.caseAScorecondition(self)

    def getScore (self):
        return self._score_

    def setScore(self, node):
        if(self._score_ != None):
            self._score_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._score_ = node
    def getFrom (self):
        return self._from_

    def setFrom(self, node):
        if(self._from_ != None):
            self._from_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._from_ = node
    def getLPar (self):
        return self._l_par_

    def setLPar(self, node):
        if(self._l_par_ != None):
            self._l_par_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._l_par_ = node
    def getScorelist (self):
        return self._scorelist_

    def setScorelist(self, node):
        if(self._scorelist_ != None):
            self._scorelist_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._scorelist_ = node
    def getRPar (self):
        return self._r_par_

    def setRPar(self, node):
        if(self._r_par_ != None):
            self._r_par_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._r_par_ = node

    def __str__(self):
        return '' + self.toString(self._score_)+ self.toString(self._from_)+ self.toString(self._l_par_)+ self.toString(self._scorelist_)+ self.toString(self._r_par_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._score_ == child):
            self._score_ = None
            return
        if (self._from_ == child):
            self._from_ = None
            return
        if (self._l_par_ == child):
            self._l_par_ = None
            return
        if (self._scorelist_ == child):
            self._scorelist_ = None
            return
        if (self._r_par_ == child):
            self._r_par_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._score_ == oldChild):
            self.setScore(newChild)
            return
        if (self._from_ == oldChild):
            self.setFrom(newChild)
            return
        if (self._l_par_ == oldChild):
            self.setLPar(newChild)
            return
        if (self._scorelist_ == oldChild):
            self.setScorelist(newChild)
            return
        if (self._r_par_ == oldChild):
            self.setRPar(newChild)
            return

class AScorelist(Node):
    def __init__ (self, _scoreitem_=None,_scoreitems_=None):
        super(AScorelist, self).__init__()
        self._scoreitem_ = None
        self._scoreitems_ = list()
        if (_scoreitem_ != None):
            self.setScoreitem(_scoreitem_)
        if (_scoreitems_ != None):
            self._scoreitems_.extend(_scoreitems_)

    def clone(self):
        return AScorelist(self.cloneNode(self._scoreitem_),self.cloneList(self._scoreitems_))

    def apply(self, analysis):
        analysis.caseAScorelist(self)

    def getScoreitem (self):
        return self._scoreitem_

    def setScoreitem(self, node):
        if(self._scoreitem_ != None):
            self._scoreitem_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._scoreitem_ = node
    def getScoreitems(self):
        return self._scoreitems_

    def setScoreitems(self, lst):
        del self._scoreitems_[0:len(self._scoreitems_)]
        self._scoreitems_.extend(lst)
        

    def __str__(self):
        return '' + self.toString(self._scoreitem_)+ self.toString(self._scoreitems_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._scoreitem_ == child):
            self._scoreitem_ = None
            return
        if child in self._scoreitems_:
            self._scoreitems_.remove(child)
            return

    def replaceChild(self, oldChild, newChild):
        if (self._scoreitem_ == oldChild):
            self.setScoreitem(newChild)
            return
        for i in range(self._scoreitems_):
            if (self._scoreitems_[i] == oldChild):
                if (newChild != None):
                    self._scoreitems_[i] = newChild
                    oldChild.setparent(None)
                    return

                del self._scoreitems_[i]
                oldChild.setparent(None)
                return

class AStatementScoreitem(Node):
    def __init__ (self, _booleancondition_=None,_mapper_=None,_min_=None,_number_=None):
        super(AStatementScoreitem, self).__init__()
        self._booleancondition_ = None
        self._mapper_ = None
        self._min_ = None
        self._number_ = None
        if (_booleancondition_ != None):
            self.setBooleancondition(_booleancondition_)
        if (_mapper_ != None):
            self.setMapper(_mapper_)
        if (_min_ != None):
            self.setMin(_min_)
        if (_number_ != None):
            self.setNumber(_number_)

    def clone(self):
        return AStatementScoreitem(self.cloneNode(self._booleancondition_),self.cloneNode(self._mapper_),self.cloneNode(self._min_),self.cloneNode(self._number_))

    def apply(self, analysis):
        analysis.caseAStatementScoreitem(self)

    def getBooleancondition (self):
        return self._booleancondition_

    def setBooleancondition(self, node):
        if(self._booleancondition_ != None):
            self._booleancondition_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._booleancondition_ = node
    def getMapper (self):
        return self._mapper_

    def setMapper(self, node):
        if(self._mapper_ != None):
            self._mapper_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._mapper_ = node
    def getMin (self):
        return self._min_

    def setMin(self, node):
        if(self._min_ != None):
            self._min_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._min_ = node
    def getNumber (self):
        return self._number_

    def setNumber(self, node):
        if(self._number_ != None):
            self._number_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._number_ = node

    def __str__(self):
        return '' + self.toString(self._booleancondition_)+ self.toString(self._mapper_)+ self.toString(self._min_)+ self.toString(self._number_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._booleancondition_ == child):
            self._booleancondition_ = None
            return
        if (self._mapper_ == child):
            self._mapper_ = None
            return
        if (self._min_ == child):
            self._min_ = None
            return
        if (self._number_ == child):
            self._number_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._booleancondition_ == oldChild):
            self.setBooleancondition(newChild)
            return
        if (self._mapper_ == oldChild):
            self.setMapper(newChild)
            return
        if (self._min_ == oldChild):
            self.setMin(newChild)
            return
        if (self._number_ == oldChild):
            self.setNumber(newChild)
            return

class AMaxScoreitem(Node):
    def __init__ (self, _max_=None,_l_par_=None,_scorelist_=None,_r_par_=None):
        super(AMaxScoreitem, self).__init__()
        self._max_ = None
        self._l_par_ = None
        self._scorelist_ = None
        self._r_par_ = None
        if (_max_ != None):
            self.setMax(_max_)
        if (_l_par_ != None):
            self.setLPar(_l_par_)
        if (_scorelist_ != None):
            self.setScorelist(_scorelist_)
        if (_r_par_ != None):
            self.setRPar(_r_par_)

    def clone(self):
        return AMaxScoreitem(self.cloneNode(self._max_),self.cloneNode(self._l_par_),self.cloneNode(self._scorelist_),self.cloneNode(self._r_par_))

    def apply(self, analysis):
        analysis.caseAMaxScoreitem(self)

    def getMax (self):
        return self._max_

    def setMax(self, node):
        if(self._max_ != None):
            self._max_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._max_ = node
    def getLPar (self):
        return self._l_par_

    def setLPar(self, node):
        if(self._l_par_ != None):
            self._l_par_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._l_par_ = node
    def getScorelist (self):
        return self._scorelist_

    def setScorelist(self, node):
        if(self._scorelist_ != None):
            self._scorelist_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._scorelist_ = node
    def getRPar (self):
        return self._r_par_

    def setRPar(self, node):
        if(self._r_par_ != None):
            self._r_par_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._r_par_ = node

    def __str__(self):
        return '' + self.toString(self._max_)+ self.toString(self._l_par_)+ self.toString(self._scorelist_)+ self.toString(self._r_par_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._max_ == child):
            self._max_ = None
            return
        if (self._l_par_ == child):
            self._l_par_ = None
            return
        if (self._scorelist_ == child):
            self._scorelist_ = None
            return
        if (self._r_par_ == child):
            self._r_par_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._max_ == oldChild):
            self.setMax(newChild)
            return
        if (self._l_par_ == oldChild):
            self.setLPar(newChild)
            return
        if (self._scorelist_ == oldChild):
            self.setScorelist(newChild)
            return
        if (self._r_par_ == oldChild):
            self.setRPar(newChild)
            return

class AScoreitems(Node):
    def __init__ (self, _comma_=None,_scoreitem_=None):
        super(AScoreitems, self).__init__()
        self._comma_ = None
        self._scoreitem_ = None
        if (_comma_ != None):
            self.setComma(_comma_)
        if (_scoreitem_ != None):
            self.setScoreitem(_scoreitem_)

    def clone(self):
        return AScoreitems(self.cloneNode(self._comma_),self.cloneNode(self._scoreitem_))

    def apply(self, analysis):
        analysis.caseAScoreitems(self)

    def getComma (self):
        return self._comma_

    def setComma(self, node):
        if(self._comma_ != None):
            self._comma_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._comma_ = node
    def getScoreitem (self):
        return self._scoreitem_

    def setScoreitem(self, node):
        if(self._scoreitem_ != None):
            self._scoreitem_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._scoreitem_ = node

    def __str__(self):
        return '' + self.toString(self._comma_)+ self.toString(self._scoreitem_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._comma_ == child):
            self._comma_ = None
            return
        if (self._scoreitem_ == child):
            self._scoreitem_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._comma_ == oldChild):
            self.setComma(newChild)
            return
        if (self._scoreitem_ == oldChild):
            self.setScoreitem(newChild)
            return

class AIntegerNumber(Node):
    def __init__ (self, _integer_=None):
        super(AIntegerNumber, self).__init__()
        self._integer_ = None
        if (_integer_ != None):
            self.setInteger(_integer_)

    def clone(self):
        return AIntegerNumber(self.cloneNode(self._integer_))

    def apply(self, analysis):
        analysis.caseAIntegerNumber(self)

    def getInteger (self):
        return self._integer_

    def setInteger(self, node):
        if(self._integer_ != None):
            self._integer_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._integer_ = node

    def __str__(self):
        return '' + self.toString(self._integer_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._integer_ == child):
            self._integer_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._integer_ == oldChild):
            self.setInteger(newChild)
            return

class AFloatNumber(Node):
    def __init__ (self, _float_=None):
        super(AFloatNumber, self).__init__()
        self._float_ = None
        if (_float_ != None):
            self.setFloat(_float_)

    def clone(self):
        return AFloatNumber(self.cloneNode(self._float_))

    def apply(self, analysis):
        analysis.caseAFloatNumber(self)

    def getFloat (self):
        return self._float_

    def setFloat(self, node):
        if(self._float_ != None):
            self._float_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._float_ = node

    def __str__(self):
        return '' + self.toString(self._float_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._float_ == child):
            self._float_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._float_ == oldChild):
            self.setFloat(newChild)
            return


class Start(Node):
    def __init__(self, _base_=None, _eof_=None):
        super(Start, self).__init__()
        self._base_ = None
        self._eof_ = None
        self.setPStatement(_base_)
        self.setEOF(_eof_)

    def clone(self):
        return Start(self.cloneNode(self._base_), self.cloneNode(self._eof_))

    def apply(self, analysis):
        analysis.caseStart(self)

    def getPStatement(self):
        return self._base_
        
    def setPStatement(self, node):
        if(self._base_ != None):
            self._base_.setparent(None)

        if(node != None):
            if(node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._base_ = node

    def getEOF(self):
        return self._eof_
        
    def setEOF(self, node):
        if(self._eof_ != None):
            self._eof_.setparent(None)

        if(node != None):
            if(node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._eof_ = node

    def removeChild(self, child):
        if(self._base_ == child):
            self._base_ = None
            return

        if(self._eof_ == child):
            self._eof_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if(self._base_ == oldChild):
            self.setPStatement(newChild)
            return

        if(self._eof_ == oldChild):
            self.setEOF(newChild)
            return

    def __str__(self):
        return '' + self.toString(self._base_) + self.toString(self._eof_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
     

############################# analysis.py #############################################

class Analysis(object):
    def __init__(self):
        self._in_ = None
        self._out_ = None

    def getIn(self, node):
        if (self._in_ == None):
            return None
            
        if self._in_.has_key(node):
            return self._in_[node]
        else:
            return None

    def setIn(self, node, _in_):
        if(self._in_ == None):
            self._in_ = dict()

        if not(_in_ == None):
            self._in_[node] = _in_
        else:
            if self._in_.has_key(node):
                del self._in_[node]

    def getOut(self, node):
        if(self._out_ == None):
            return None
            
        if self._out_.has_key(node):
            return self._out_[node]
        else:
            return None

    def setOut(self, node, _out_):
        if(self._out_ == None):
            self._out_ = dict()

        if not(_out_ == None):
            self._out_[node] = _out_
        else:
            if self._out_.has_key(node):
                del self._out_[node]

    def caseStart(self, node):
        self.defaultCase(node)

    def caseALogicstatementStatement(self, node):
        self.defaultCase(node)
        
    def caseAScoreStatement(self, node):
        self.defaultCase(node)
        
    def caseABooleancondition(self, node):
        self.defaultCase(node)
        
    def caseAStatementCondition(self, node):
        self.defaultCase(node)
        
    def caseAResidueCondition(self, node):
        self.defaultCase(node)
        
    def caseAExcludeCondition(self, node):
        self.defaultCase(node)
        
    def caseASelectCondition(self, node):
        self.defaultCase(node)
        
    def caseACondition2(self, node):
        self.defaultCase(node)
        
    def caseAAndLogicsymbol(self, node):
        self.defaultCase(node)
        
    def caseAOrLogicsymbol(self, node):
        self.defaultCase(node)
        
    def caseAResidueResidue(self, node):
        self.defaultCase(node)
        
    def caseAResiduenotResidue(self, node):
        self.defaultCase(node)
        
    def caseAResidueinvertResidue(self, node):
        self.defaultCase(node)
        
    def caseAExcludestatement(self, node):
        self.defaultCase(node)
        
    def caseASelectstatement(self, node):
        self.defaultCase(node)
        
    def caseAExactlySelectstatement2(self, node):
        self.defaultCase(node)
        
    def caseAAtleastSelectstatement2(self, node):
        self.defaultCase(node)
        
    def caseANotmorethanSelectstatement2(self, node):
        self.defaultCase(node)
        
    def caseAAtleastnotmorethanSelectstatement2(self, node):
        self.defaultCase(node)
        
    def caseASelectlist(self, node):
        self.defaultCase(node)
        
    def caseAListitems(self, node):
        self.defaultCase(node)
        
    def caseAScorecondition(self, node):
        self.defaultCase(node)
        
    def caseAScorelist(self, node):
        self.defaultCase(node)
        
    def caseAStatementScoreitem(self, node):
        self.defaultCase(node)
        
    def caseAMaxScoreitem(self, node):
        self.defaultCase(node)
        
    def caseAScoreitems(self, node):
        self.defaultCase(node)
        
    def caseAIntegerNumber(self, node):
        self.defaultCase(node)
        
    def caseAFloatNumber(self, node):
        self.defaultCase(node)
        

    def caseTMin(self, node):
        self.defaultCase(node)
        
    def caseTAnd(self, node):
        self.defaultCase(node)
        
    def caseTOr(self, node):
        self.defaultCase(node)
        
    def caseTNot(self, node):
        self.defaultCase(node)
        
    def caseTExclude(self, node):
        self.defaultCase(node)
        
    def caseTSelect(self, node):
        self.defaultCase(node)
        
    def caseTFrom(self, node):
        self.defaultCase(node)
        
    def caseTAtleast(self, node):
        self.defaultCase(node)
        
    def caseTExactly(self, node):
        self.defaultCase(node)
        
    def caseTNotmorethan(self, node):
        self.defaultCase(node)
        
    def caseTScore(self, node):
        self.defaultCase(node)
        
    def caseTMax(self, node):
        self.defaultCase(node)
        
    def caseTLPar(self, node):
        self.defaultCase(node)
        
    def caseTRPar(self, node):
        self.defaultCase(node)
        
    def caseTMapper(self, node):
        self.defaultCase(node)
        
    def caseTComma(self, node):
        self.defaultCase(node)
        
    def caseTBlank(self, node):
        self.defaultCase(node)
        
    def caseTInteger(self, node):
        self.defaultCase(node)
        
    def caseTFloat(self, node):
        self.defaultCase(node)
        
    def caseTAminoAcid(self, node):
        self.defaultCase(node)
        
    def caseEOF(self, node):
        self.defaultCase(node)

    def defaultCase(self, node):
		pass

class DepthFirstAdapter(Analysis):
    def inStart(self, node):
        self.defaultIn(node)

    def outStart(self, node):
        self.defaultOut(node)

    def defaultIn(self, node):
        pass

    def defaultOut(self, node):
	    pass

    def caseStart(self, node):
        self.inStart(node)
        node.getPStatement().apply(self)
        node.getEOF().apply(self);
        self.outStart(node)

    def inALogicstatementStatement(self, node):
        self.defaultIn(node)

    def outALogicstatementStatement(self, node):
        self.defaultOut(node)

    def caseALogicstatementStatement(self, node):
        self.inALogicstatementStatement(node)
        if not(node.getBooleancondition() == None):
            node.getBooleancondition().apply(self)
        self.outALogicstatementStatement(node)
        
    def inAScoreStatement(self, node):
        self.defaultIn(node)

    def outAScoreStatement(self, node):
        self.defaultOut(node)

    def caseAScoreStatement(self, node):
        self.inAScoreStatement(node)
        if not(node.getScorecondition() == None):
            node.getScorecondition().apply(self)
        self.outAScoreStatement(node)
        
    def inABooleancondition(self, node):
        self.defaultIn(node)

    def outABooleancondition(self, node):
        self.defaultOut(node)

    def caseABooleancondition(self, node):
        self.inABooleancondition(node)
        if not(node.getCondition() == None):
            node.getCondition().apply(self)
        temp = node.getCondition2()
        for item in temp:
            item.apply(self)
        self.outABooleancondition(node)
        
    def inAStatementCondition(self, node):
        self.defaultIn(node)

    def outAStatementCondition(self, node):
        self.defaultOut(node)

    def caseAStatementCondition(self, node):
        self.inAStatementCondition(node)
        if not(node.getLPar() == None):
            node.getLPar().apply(self)
        if not(node.getBooleancondition() == None):
            node.getBooleancondition().apply(self)
        if not(node.getRPar() == None):
            node.getRPar().apply(self)
        self.outAStatementCondition(node)
        
    def inAResidueCondition(self, node):
        self.defaultIn(node)

    def outAResidueCondition(self, node):
        self.defaultOut(node)

    def caseAResidueCondition(self, node):
        self.inAResidueCondition(node)
        if not(node.getResidue() == None):
            node.getResidue().apply(self)
        self.outAResidueCondition(node)
        
    def inAExcludeCondition(self, node):
        self.defaultIn(node)

    def outAExcludeCondition(self, node):
        self.defaultOut(node)

    def caseAExcludeCondition(self, node):
        self.inAExcludeCondition(node)
        if not(node.getExcludestatement() == None):
            node.getExcludestatement().apply(self)
        self.outAExcludeCondition(node)
        
    def inASelectCondition(self, node):
        self.defaultIn(node)

    def outASelectCondition(self, node):
        self.defaultOut(node)

    def caseASelectCondition(self, node):
        self.inASelectCondition(node)
        if not(node.getSelectstatement() == None):
            node.getSelectstatement().apply(self)
        self.outASelectCondition(node)
        
    def inACondition2(self, node):
        self.defaultIn(node)

    def outACondition2(self, node):
        self.defaultOut(node)

    def caseACondition2(self, node):
        self.inACondition2(node)
        if not(node.getLogicsymbol() == None):
            node.getLogicsymbol().apply(self)
        if not(node.getCondition() == None):
            node.getCondition().apply(self)
        self.outACondition2(node)
        
    def inAAndLogicsymbol(self, node):
        self.defaultIn(node)

    def outAAndLogicsymbol(self, node):
        self.defaultOut(node)

    def caseAAndLogicsymbol(self, node):
        self.inAAndLogicsymbol(node)
        if not(node.getAnd() == None):
            node.getAnd().apply(self)
        self.outAAndLogicsymbol(node)
        
    def inAOrLogicsymbol(self, node):
        self.defaultIn(node)

    def outAOrLogicsymbol(self, node):
        self.defaultOut(node)

    def caseAOrLogicsymbol(self, node):
        self.inAOrLogicsymbol(node)
        if not(node.getOr() == None):
            node.getOr().apply(self)
        self.outAOrLogicsymbol(node)
        
    def inAResidueResidue(self, node):
        self.defaultIn(node)

    def outAResidueResidue(self, node):
        self.defaultOut(node)

    def caseAResidueResidue(self, node):
        self.inAResidueResidue(node)
        if not(node.getOriginalaminoacid() == None):
            node.getOriginalaminoacid().apply(self)
        if not(node.getInteger() == None):
            node.getInteger().apply(self)
        temp = node.getMutatedaminoacid()
        for item in temp:
            item.apply(self)
        self.outAResidueResidue(node)
        
    def inAResiduenotResidue(self, node):
        self.defaultIn(node)

    def outAResiduenotResidue(self, node):
        self.defaultOut(node)

    def caseAResiduenotResidue(self, node):
        self.inAResiduenotResidue(node)
        if not(node.getNot() == None):
            node.getNot().apply(self)
        if not(node.getOriginalaminoacid() == None):
            node.getOriginalaminoacid().apply(self)
        if not(node.getInteger() == None):
            node.getInteger().apply(self)
        temp = node.getMutatedaminoacid()
        for item in temp:
            item.apply(self)
        self.outAResiduenotResidue(node)
        
    def inAResidueinvertResidue(self, node):
        self.defaultIn(node)

    def outAResidueinvertResidue(self, node):
        self.defaultOut(node)

    def caseAResidueinvertResidue(self, node):
        self.inAResidueinvertResidue(node)
        if not(node.getOriginalaminoacid() == None):
            node.getOriginalaminoacid().apply(self)
        if not(node.getInteger() == None):
            node.getInteger().apply(self)
        if not(node.getLPar() == None):
            node.getLPar().apply(self)
        if not(node.getNot() == None):
            node.getNot().apply(self)
        temp = node.getMutatedaminoacid()
        for item in temp:
            item.apply(self)
        if not(node.getRPar() == None):
            node.getRPar().apply(self)
        self.outAResidueinvertResidue(node)
        
    def inAExcludestatement(self, node):
        self.defaultIn(node)

    def outAExcludestatement(self, node):
        self.defaultOut(node)

    def caseAExcludestatement(self, node):
        self.inAExcludestatement(node)
        if not(node.getExclude() == None):
            node.getExclude().apply(self)
        if not(node.getResidue() == None):
            node.getResidue().apply(self)
        self.outAExcludestatement(node)
        
    def inASelectstatement(self, node):
        self.defaultIn(node)

    def outASelectstatement(self, node):
        self.defaultOut(node)

    def caseASelectstatement(self, node):
        self.inASelectstatement(node)
        if not(node.getSelect() == None):
            node.getSelect().apply(self)
        if not(node.getSelectstatement2() == None):
            node.getSelectstatement2().apply(self)
        self.outASelectstatement(node)
        
    def inAExactlySelectstatement2(self, node):
        self.defaultIn(node)

    def outAExactlySelectstatement2(self, node):
        self.defaultOut(node)

    def caseAExactlySelectstatement2(self, node):
        self.inAExactlySelectstatement2(node)
        if not(node.getExactly() == None):
            node.getExactly().apply(self)
        if not(node.getInteger() == None):
            node.getInteger().apply(self)
        if not(node.getFrom() == None):
            node.getFrom().apply(self)
        if not(node.getLPar() == None):
            node.getLPar().apply(self)
        if not(node.getSelectlist() == None):
            node.getSelectlist().apply(self)
        if not(node.getRPar() == None):
            node.getRPar().apply(self)
        self.outAExactlySelectstatement2(node)
        
    def inAAtleastSelectstatement2(self, node):
        self.defaultIn(node)

    def outAAtleastSelectstatement2(self, node):
        self.defaultOut(node)

    def caseAAtleastSelectstatement2(self, node):
        self.inAAtleastSelectstatement2(node)
        if not(node.getAtleast() == None):
            node.getAtleast().apply(self)
        if not(node.getInteger() == None):
            node.getInteger().apply(self)
        if not(node.getFrom() == None):
            node.getFrom().apply(self)
        if not(node.getLPar() == None):
            node.getLPar().apply(self)
        if not(node.getSelectlist() == None):
            node.getSelectlist().apply(self)
        if not(node.getRPar() == None):
            node.getRPar().apply(self)
        self.outAAtleastSelectstatement2(node)
        
    def inANotmorethanSelectstatement2(self, node):
        self.defaultIn(node)

    def outANotmorethanSelectstatement2(self, node):
        self.defaultOut(node)

    def caseANotmorethanSelectstatement2(self, node):
        self.inANotmorethanSelectstatement2(node)
        if not(node.getNotmorethan() == None):
            node.getNotmorethan().apply(self)
        if not(node.getInteger() == None):
            node.getInteger().apply(self)
        if not(node.getFrom() == None):
            node.getFrom().apply(self)
        if not(node.getLPar() == None):
            node.getLPar().apply(self)
        if not(node.getSelectlist() == None):
            node.getSelectlist().apply(self)
        if not(node.getRPar() == None):
            node.getRPar().apply(self)
        self.outANotmorethanSelectstatement2(node)
        
    def inAAtleastnotmorethanSelectstatement2(self, node):
        self.defaultIn(node)

    def outAAtleastnotmorethanSelectstatement2(self, node):
        self.defaultOut(node)

    def caseAAtleastnotmorethanSelectstatement2(self, node):
        self.inAAtleastnotmorethanSelectstatement2(node)
        if not(node.getAtleast() == None):
            node.getAtleast().apply(self)
        if not(node.getAtleastnumber() == None):
            node.getAtleastnumber().apply(self)
        if not(node.getLogicsymbol() == None):
            node.getLogicsymbol().apply(self)
        if not(node.getNotmorethan() == None):
            node.getNotmorethan().apply(self)
        if not(node.getNotmorethannumber() == None):
            node.getNotmorethannumber().apply(self)
        if not(node.getFrom() == None):
            node.getFrom().apply(self)
        if not(node.getLPar() == None):
            node.getLPar().apply(self)
        if not(node.getSelectlist() == None):
            node.getSelectlist().apply(self)
        if not(node.getRPar() == None):
            node.getRPar().apply(self)
        self.outAAtleastnotmorethanSelectstatement2(node)
        
    def inASelectlist(self, node):
        self.defaultIn(node)

    def outASelectlist(self, node):
        self.defaultOut(node)

    def caseASelectlist(self, node):
        self.inASelectlist(node)
        if not(node.getResidue() == None):
            node.getResidue().apply(self)
        temp = node.getListitems()
        for item in temp:
            item.apply(self)
        self.outASelectlist(node)
        
    def inAListitems(self, node):
        self.defaultIn(node)

    def outAListitems(self, node):
        self.defaultOut(node)

    def caseAListitems(self, node):
        self.inAListitems(node)
        if not(node.getComma() == None):
            node.getComma().apply(self)
        if not(node.getResidue() == None):
            node.getResidue().apply(self)
        self.outAListitems(node)
        
    def inAScorecondition(self, node):
        self.defaultIn(node)

    def outAScorecondition(self, node):
        self.defaultOut(node)

    def caseAScorecondition(self, node):
        self.inAScorecondition(node)
        if not(node.getScore() == None):
            node.getScore().apply(self)
        if not(node.getFrom() == None):
            node.getFrom().apply(self)
        if not(node.getLPar() == None):
            node.getLPar().apply(self)
        if not(node.getScorelist() == None):
            node.getScorelist().apply(self)
        if not(node.getRPar() == None):
            node.getRPar().apply(self)
        self.outAScorecondition(node)
        
    def inAScorelist(self, node):
        self.defaultIn(node)

    def outAScorelist(self, node):
        self.defaultOut(node)

    def caseAScorelist(self, node):
        self.inAScorelist(node)
        if not(node.getScoreitem() == None):
            node.getScoreitem().apply(self)
        temp = node.getScoreitems()
        for item in temp:
            item.apply(self)
        self.outAScorelist(node)
        
    def inAStatementScoreitem(self, node):
        self.defaultIn(node)

    def outAStatementScoreitem(self, node):
        self.defaultOut(node)

    def caseAStatementScoreitem(self, node):
        self.inAStatementScoreitem(node)
        if not(node.getBooleancondition() == None):
            node.getBooleancondition().apply(self)
        if not(node.getMapper() == None):
            node.getMapper().apply(self)
        if not(node.getMin() == None):
            node.getMin().apply(self)
        if not(node.getNumber() == None):
            node.getNumber().apply(self)
        self.outAStatementScoreitem(node)
        
    def inAMaxScoreitem(self, node):
        self.defaultIn(node)

    def outAMaxScoreitem(self, node):
        self.defaultOut(node)

    def caseAMaxScoreitem(self, node):
        self.inAMaxScoreitem(node)
        if not(node.getMax() == None):
            node.getMax().apply(self)
        if not(node.getLPar() == None):
            node.getLPar().apply(self)
        if not(node.getScorelist() == None):
            node.getScorelist().apply(self)
        if not(node.getRPar() == None):
            node.getRPar().apply(self)
        self.outAMaxScoreitem(node)
        
    def inAScoreitems(self, node):
        self.defaultIn(node)

    def outAScoreitems(self, node):
        self.defaultOut(node)

    def caseAScoreitems(self, node):
        self.inAScoreitems(node)
        if not(node.getComma() == None):
            node.getComma().apply(self)
        if not(node.getScoreitem() == None):
            node.getScoreitem().apply(self)
        self.outAScoreitems(node)
        
    def inAIntegerNumber(self, node):
        self.defaultIn(node)

    def outAIntegerNumber(self, node):
        self.defaultOut(node)

    def caseAIntegerNumber(self, node):
        self.inAIntegerNumber(node)
        if not(node.getInteger() == None):
            node.getInteger().apply(self)
        self.outAIntegerNumber(node)
        
    def inAFloatNumber(self, node):
        self.defaultIn(node)

    def outAFloatNumber(self, node):
        self.defaultOut(node)

    def caseAFloatNumber(self, node):
        self.inAFloatNumber(node)
        if not(node.getFloat() == None):
            node.getFloat().apply(self)
        self.outAFloatNumber(node)
        


class ReversedDepthFirstAdapter(Analysis):
    def inStart(self, node):
        self.defaultIn(node)

    def outStart(self, node):
        self.defaultOut(node)

    def defaultIn(self, node):
        pass

    def defaultOut(self, node):
        pass

    def caseStart(self, node):
        self.inStart(node)
        node.getEOF().apply(self)
        node.getPStatement().apply(self)
        self.outStart(node)

    def inALogicstatementStatement(self, node):
        self.defaultIn(node)

    def outALogicstatementStatement(self, node):
        self.defaultOut(node)

    def caseALogicstatementStatement(self, node):
        self.inALogicstatementStatement(node)
        if (node.getBooleancondition() != None):
            node.getBooleancondition().apply(self)
        self.outALogicstatementStatement(node)
        
    def inAScoreStatement(self, node):
        self.defaultIn(node)

    def outAScoreStatement(self, node):
        self.defaultOut(node)

    def caseAScoreStatement(self, node):
        self.inAScoreStatement(node)
        if (node.getScorecondition() != None):
            node.getScorecondition().apply(self)
        self.outAScoreStatement(node)
        
    def inABooleancondition(self, node):
        self.defaultIn(node)

    def outABooleancondition(self, node):
        self.defaultOut(node)

    def caseABooleancondition(self, node):
        self.inABooleancondition(node)
        temp = node.getCondition2()
        temp.reverse()
        for item in temp:
            item.apply(self)
        if (node.getCondition() != None):
            node.getCondition().apply(self)
        self.outABooleancondition(node)
        
    def inAStatementCondition(self, node):
        self.defaultIn(node)

    def outAStatementCondition(self, node):
        self.defaultOut(node)

    def caseAStatementCondition(self, node):
        self.inAStatementCondition(node)
        if (node.getRPar() != None):
            node.getRPar().apply(self)
        if (node.getBooleancondition() != None):
            node.getBooleancondition().apply(self)
        if (node.getLPar() != None):
            node.getLPar().apply(self)
        self.outAStatementCondition(node)
        
    def inAResidueCondition(self, node):
        self.defaultIn(node)

    def outAResidueCondition(self, node):
        self.defaultOut(node)

    def caseAResidueCondition(self, node):
        self.inAResidueCondition(node)
        if (node.getResidue() != None):
            node.getResidue().apply(self)
        self.outAResidueCondition(node)
        
    def inAExcludeCondition(self, node):
        self.defaultIn(node)

    def outAExcludeCondition(self, node):
        self.defaultOut(node)

    def caseAExcludeCondition(self, node):
        self.inAExcludeCondition(node)
        if (node.getExcludestatement() != None):
            node.getExcludestatement().apply(self)
        self.outAExcludeCondition(node)
        
    def inASelectCondition(self, node):
        self.defaultIn(node)

    def outASelectCondition(self, node):
        self.defaultOut(node)

    def caseASelectCondition(self, node):
        self.inASelectCondition(node)
        if (node.getSelectstatement() != None):
            node.getSelectstatement().apply(self)
        self.outASelectCondition(node)
        
    def inACondition2(self, node):
        self.defaultIn(node)

    def outACondition2(self, node):
        self.defaultOut(node)

    def caseACondition2(self, node):
        self.inACondition2(node)
        if (node.getCondition() != None):
            node.getCondition().apply(self)
        if (node.getLogicsymbol() != None):
            node.getLogicsymbol().apply(self)
        self.outACondition2(node)
        
    def inAAndLogicsymbol(self, node):
        self.defaultIn(node)

    def outAAndLogicsymbol(self, node):
        self.defaultOut(node)

    def caseAAndLogicsymbol(self, node):
        self.inAAndLogicsymbol(node)
        if (node.getAnd() != None):
            node.getAnd().apply(self)
        self.outAAndLogicsymbol(node)
        
    def inAOrLogicsymbol(self, node):
        self.defaultIn(node)

    def outAOrLogicsymbol(self, node):
        self.defaultOut(node)

    def caseAOrLogicsymbol(self, node):
        self.inAOrLogicsymbol(node)
        if (node.getOr() != None):
            node.getOr().apply(self)
        self.outAOrLogicsymbol(node)
        
    def inAResidueResidue(self, node):
        self.defaultIn(node)

    def outAResidueResidue(self, node):
        self.defaultOut(node)

    def caseAResidueResidue(self, node):
        self.inAResidueResidue(node)
        temp = node.getMutatedaminoacid()
        temp.reverse()
        for item in temp:
            item.apply(self)
        if (node.getInteger() != None):
            node.getInteger().apply(self)
        if (node.getOriginalaminoacid() != None):
            node.getOriginalaminoacid().apply(self)
        self.outAResidueResidue(node)
        
    def inAResiduenotResidue(self, node):
        self.defaultIn(node)

    def outAResiduenotResidue(self, node):
        self.defaultOut(node)

    def caseAResiduenotResidue(self, node):
        self.inAResiduenotResidue(node)
        temp = node.getMutatedaminoacid()
        temp.reverse()
        for item in temp:
            item.apply(self)
        if (node.getInteger() != None):
            node.getInteger().apply(self)
        if (node.getOriginalaminoacid() != None):
            node.getOriginalaminoacid().apply(self)
        if (node.getNot() != None):
            node.getNot().apply(self)
        self.outAResiduenotResidue(node)
        
    def inAResidueinvertResidue(self, node):
        self.defaultIn(node)

    def outAResidueinvertResidue(self, node):
        self.defaultOut(node)

    def caseAResidueinvertResidue(self, node):
        self.inAResidueinvertResidue(node)
        if (node.getRPar() != None):
            node.getRPar().apply(self)
        temp = node.getMutatedaminoacid()
        temp.reverse()
        for item in temp:
            item.apply(self)
        if (node.getNot() != None):
            node.getNot().apply(self)
        if (node.getLPar() != None):
            node.getLPar().apply(self)
        if (node.getInteger() != None):
            node.getInteger().apply(self)
        if (node.getOriginalaminoacid() != None):
            node.getOriginalaminoacid().apply(self)
        self.outAResidueinvertResidue(node)
        
    def inAExcludestatement(self, node):
        self.defaultIn(node)

    def outAExcludestatement(self, node):
        self.defaultOut(node)

    def caseAExcludestatement(self, node):
        self.inAExcludestatement(node)
        if (node.getResidue() != None):
            node.getResidue().apply(self)
        if (node.getExclude() != None):
            node.getExclude().apply(self)
        self.outAExcludestatement(node)
        
    def inASelectstatement(self, node):
        self.defaultIn(node)

    def outASelectstatement(self, node):
        self.defaultOut(node)

    def caseASelectstatement(self, node):
        self.inASelectstatement(node)
        if (node.getSelectstatement2() != None):
            node.getSelectstatement2().apply(self)
        if (node.getSelect() != None):
            node.getSelect().apply(self)
        self.outASelectstatement(node)
        
    def inAExactlySelectstatement2(self, node):
        self.defaultIn(node)

    def outAExactlySelectstatement2(self, node):
        self.defaultOut(node)

    def caseAExactlySelectstatement2(self, node):
        self.inAExactlySelectstatement2(node)
        if (node.getRPar() != None):
            node.getRPar().apply(self)
        if (node.getSelectlist() != None):
            node.getSelectlist().apply(self)
        if (node.getLPar() != None):
            node.getLPar().apply(self)
        if (node.getFrom() != None):
            node.getFrom().apply(self)
        if (node.getInteger() != None):
            node.getInteger().apply(self)
        if (node.getExactly() != None):
            node.getExactly().apply(self)
        self.outAExactlySelectstatement2(node)
        
    def inAAtleastSelectstatement2(self, node):
        self.defaultIn(node)

    def outAAtleastSelectstatement2(self, node):
        self.defaultOut(node)

    def caseAAtleastSelectstatement2(self, node):
        self.inAAtleastSelectstatement2(node)
        if (node.getRPar() != None):
            node.getRPar().apply(self)
        if (node.getSelectlist() != None):
            node.getSelectlist().apply(self)
        if (node.getLPar() != None):
            node.getLPar().apply(self)
        if (node.getFrom() != None):
            node.getFrom().apply(self)
        if (node.getInteger() != None):
            node.getInteger().apply(self)
        if (node.getAtleast() != None):
            node.getAtleast().apply(self)
        self.outAAtleastSelectstatement2(node)
        
    def inANotmorethanSelectstatement2(self, node):
        self.defaultIn(node)

    def outANotmorethanSelectstatement2(self, node):
        self.defaultOut(node)

    def caseANotmorethanSelectstatement2(self, node):
        self.inANotmorethanSelectstatement2(node)
        if (node.getRPar() != None):
            node.getRPar().apply(self)
        if (node.getSelectlist() != None):
            node.getSelectlist().apply(self)
        if (node.getLPar() != None):
            node.getLPar().apply(self)
        if (node.getFrom() != None):
            node.getFrom().apply(self)
        if (node.getInteger() != None):
            node.getInteger().apply(self)
        if (node.getNotmorethan() != None):
            node.getNotmorethan().apply(self)
        self.outANotmorethanSelectstatement2(node)
        
    def inAAtleastnotmorethanSelectstatement2(self, node):
        self.defaultIn(node)

    def outAAtleastnotmorethanSelectstatement2(self, node):
        self.defaultOut(node)

    def caseAAtleastnotmorethanSelectstatement2(self, node):
        self.inAAtleastnotmorethanSelectstatement2(node)
        if (node.getRPar() != None):
            node.getRPar().apply(self)
        if (node.getSelectlist() != None):
            node.getSelectlist().apply(self)
        if (node.getLPar() != None):
            node.getLPar().apply(self)
        if (node.getFrom() != None):
            node.getFrom().apply(self)
        if (node.getNotmorethannumber() != None):
            node.getNotmorethannumber().apply(self)
        if (node.getNotmorethan() != None):
            node.getNotmorethan().apply(self)
        if (node.getLogicsymbol() != None):
            node.getLogicsymbol().apply(self)
        if (node.getAtleastnumber() != None):
            node.getAtleastnumber().apply(self)
        if (node.getAtleast() != None):
            node.getAtleast().apply(self)
        self.outAAtleastnotmorethanSelectstatement2(node)
        
    def inASelectlist(self, node):
        self.defaultIn(node)

    def outASelectlist(self, node):
        self.defaultOut(node)

    def caseASelectlist(self, node):
        self.inASelectlist(node)
        temp = node.getListitems()
        temp.reverse()
        for item in temp:
            item.apply(self)
        if (node.getResidue() != None):
            node.getResidue().apply(self)
        self.outASelectlist(node)
        
    def inAListitems(self, node):
        self.defaultIn(node)

    def outAListitems(self, node):
        self.defaultOut(node)

    def caseAListitems(self, node):
        self.inAListitems(node)
        if (node.getResidue() != None):
            node.getResidue().apply(self)
        if (node.getComma() != None):
            node.getComma().apply(self)
        self.outAListitems(node)
        
    def inAScorecondition(self, node):
        self.defaultIn(node)

    def outAScorecondition(self, node):
        self.defaultOut(node)

    def caseAScorecondition(self, node):
        self.inAScorecondition(node)
        if (node.getRPar() != None):
            node.getRPar().apply(self)
        if (node.getScorelist() != None):
            node.getScorelist().apply(self)
        if (node.getLPar() != None):
            node.getLPar().apply(self)
        if (node.getFrom() != None):
            node.getFrom().apply(self)
        if (node.getScore() != None):
            node.getScore().apply(self)
        self.outAScorecondition(node)
        
    def inAScorelist(self, node):
        self.defaultIn(node)

    def outAScorelist(self, node):
        self.defaultOut(node)

    def caseAScorelist(self, node):
        self.inAScorelist(node)
        temp = node.getScoreitems()
        temp.reverse()
        for item in temp:
            item.apply(self)
        if (node.getScoreitem() != None):
            node.getScoreitem().apply(self)
        self.outAScorelist(node)
        
    def inAStatementScoreitem(self, node):
        self.defaultIn(node)

    def outAStatementScoreitem(self, node):
        self.defaultOut(node)

    def caseAStatementScoreitem(self, node):
        self.inAStatementScoreitem(node)
        if (node.getNumber() != None):
            node.getNumber().apply(self)
        if (node.getMin() != None):
            node.getMin().apply(self)
        if (node.getMapper() != None):
            node.getMapper().apply(self)
        if (node.getBooleancondition() != None):
            node.getBooleancondition().apply(self)
        self.outAStatementScoreitem(node)
        
    def inAMaxScoreitem(self, node):
        self.defaultIn(node)

    def outAMaxScoreitem(self, node):
        self.defaultOut(node)

    def caseAMaxScoreitem(self, node):
        self.inAMaxScoreitem(node)
        if (node.getRPar() != None):
            node.getRPar().apply(self)
        if (node.getScorelist() != None):
            node.getScorelist().apply(self)
        if (node.getLPar() != None):
            node.getLPar().apply(self)
        if (node.getMax() != None):
            node.getMax().apply(self)
        self.outAMaxScoreitem(node)
        
    def inAScoreitems(self, node):
        self.defaultIn(node)

    def outAScoreitems(self, node):
        self.defaultOut(node)

    def caseAScoreitems(self, node):
        self.inAScoreitems(node)
        if (node.getScoreitem() != None):
            node.getScoreitem().apply(self)
        if (node.getComma() != None):
            node.getComma().apply(self)
        self.outAScoreitems(node)
        
    def inAIntegerNumber(self, node):
        self.defaultIn(node)

    def outAIntegerNumber(self, node):
        self.defaultOut(node)

    def caseAIntegerNumber(self, node):
        self.inAIntegerNumber(node)
        if (node.getInteger() != None):
            node.getInteger().apply(self)
        self.outAIntegerNumber(node)
        
    def inAFloatNumber(self, node):
        self.defaultIn(node)

    def outAFloatNumber(self, node):
        self.defaultOut(node)

    def caseAFloatNumber(self, node):
        self.inAFloatNumber(node)
        if (node.getFloat() != None):
            node.getFloat().apply(self)
        self.outAFloatNumber(node)
        


############################# lexer.py ############################################# 

class LexerException(Exception):
    def __init__(self, value):
        self.value = value

    def __str__(self):
        return self.value
        
# lexer states
STATE_INITIAL = 0

accept_tokens = [None] * 20
        
accept_tokens[0] = lambda line, pos: TMin(line, pos)
accept_tokens[1] = lambda line, pos: TAnd(line, pos)
accept_tokens[2] = lambda line, pos: TOr(line, pos)
accept_tokens[3] = lambda line, pos: TNot(line, pos)
accept_tokens[4] = lambda line, pos: TExclude(line, pos)
accept_tokens[5] = lambda line, pos: TSelect(line, pos)
accept_tokens[6] = lambda line, pos: TFrom(line, pos)
accept_tokens[7] = lambda line, pos: TAtleast(line, pos)
accept_tokens[8] = lambda line, pos: TExactly(line, pos)
accept_tokens[9] = lambda line, pos: TNotmorethan(line, pos)
accept_tokens[10] = lambda line, pos: TScore(line, pos)
accept_tokens[11] = lambda line, pos: TMax(line, pos)
accept_tokens[12] = lambda line, pos: TLPar(line, pos)
accept_tokens[13] = lambda line, pos: TRPar(line, pos)
accept_tokens[14] = lambda line, pos: TMapper(line, pos)
accept_tokens[15] = lambda line, pos: TComma(line, pos)
accept_tokens[16] = lambda line, pos: TBlank(None, line, pos)
accept_tokens[17] = lambda line, pos: TInteger(None, line, pos)
accept_tokens[18] = lambda line, pos: TFloat(None, line, pos)
accept_tokens[19] = lambda line, pos: TAminoAcid(None, line, pos)


lexer_gotoTable = [
                    [
                      [
                        [9, 9, 1],
                        [10, 10, 2],
                        [13, 13, 3],
                        [32, 32, 4],
                        [40, 40, 5],
                        [41, 41, 6],
                        [44, 44, 7],
                        [45, 45, 8],
                        [48, 57, 9],
                        [61, 61, 10],
                        [65, 65, 11],
                        [67, 67, 12],
                        [68, 68, 13],
                        [69, 69, 14],
                        [70, 70, 15],
                        [71, 71, 16],
                        [72, 72, 17],
                        [73, 73, 18],
                        [75, 75, 19],
                        [76, 76, 20],
                        [77, 77, 21],
                        [78, 78, 22],
                        [79, 79, 23],
                        [80, 80, 24],
                        [81, 81, 25],
                        [82, 82, 26],
                        [83, 83, 27],
                        [84, 84, 28],
                        [86, 86, 29],
                        [87, 87, 30],
                        [89, 89, 31],
                        [90, 90, 32],
                        [100, 100, 33],
                        [105, 105, 34],
                      ],
                      [
                        [9, 32, -2],
                      ],
                      [
                        [9, 32, -2],
                      ],
                      [
                        [9, 32, -2],
                      ],
                      [
                        [9, 32, -2],
                      ],
                      [
                      ],
                      [
                      ],
                      [
                      ],
                      [
                      ],
                      [
                        [46, 46, 35],
                        [48, 57, 9],
                      ],
                      [
                        [62, 62, 36],
                      ],
                      [
                        [78, 78, 37],
                        [84, 84, 38],
                      ],
                      [
                      ],
                      [
                      ],
                      [
                        [88, 88, 39],
                      ],
                      [
                        [82, 82, 40],
                      ],
                      [
                      ],
                      [
                      ],
                      [
                      ],
                      [
                      ],
                      [
                      ],
                      [
                        [65, 65, 41],
                      ],
                      [
                        [79, 79, 42],
                      ],
                      [
                        [82, 82, 43],
                      ],
                      [
                      ],
                      [
                      ],
                      [
                      ],
                      [
                        [67, 67, 44],
                        [69, 69, 45],
                      ],
                      [
                      ],
                      [
                      ],
                      [
                      ],
                      [
                      ],
                      [
                      ],
                      [
                      ],
                      [
                      ],
                      [
                        [48, 57, 46],
                      ],
                      [
                      ],
                      [
                        [68, 68, 47],
                      ],
                      [
                        [76, 76, 48],
                      ],
                      [
                        [65, 65, 49],
                        [67, 67, 50],
                      ],
                      [
                        [79, 79, 51],
                      ],
                      [
                        [88, 88, 52],
                      ],
                      [
                        [84, 84, 53],
                      ],
                      [
                      ],
                      [
                        [79, 79, 54],
                      ],
                      [
                        [76, 76, 55],
                      ],
                      [
                        [48, 57, 46],
                      ],
                      [
                      ],
                      [
                        [69, 69, 56],
                      ],
                      [
                        [67, 67, 57],
                      ],
                      [
                        [76, 76, 58],
                      ],
                      [
                        [77, 77, 59],
                      ],
                      [
                      ],
                      [
                        [77, 77, 60],
                      ],
                      [
                        [82, 82, 61],
                      ],
                      [
                        [69, 69, 62],
                      ],
                      [
                        [65, 65, 63],
                      ],
                      [
                        [84, 84, 64],
                      ],
                      [
                        [85, 85, 65],
                      ],
                      [
                      ],
                      [
                        [79, 79, 66],
                      ],
                      [
                        [69, 69, 67],
                      ],
                      [
                        [67, 67, 68],
                      ],
                      [
                        [83, 83, 69],
                      ],
                      [
                        [76, 76, 70],
                      ],
                      [
                        [68, 68, 71],
                      ],
                      [
                        [82, 82, 72],
                      ],
                      [
                      ],
                      [
                        [84, 84, 73],
                      ],
                      [
                        [84, 84, 74],
                      ],
                      [
                        [89, 89, 75],
                      ],
                      [
                        [69, 69, 76],
                      ],
                      [
                        [69, 69, 77],
                      ],
                      [
                      ],
                      [
                      ],
                      [
                      ],
                      [
                      ],
                      [
                        [84, 84, 78],
                      ],
                      [
                        [72, 72, 79],
                      ],
                      [
                        [65, 65, 80],
                      ],
                      [
                        [78, 78, 81],
                      ],
                      [
                      ],
                    ],
                  ] 
                
accept_table = [
                 [
                   -1, 16, 16, 16, 16, 12, 13, 15, 0, 17, -1, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, -1, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, -1, 14, -1, -1, -1, -1, -1, -1, 2, -1, -1, 18, 1, -1, -1, -1, -1, 11, 3, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, 5, 7, 8, 4, -1, -1, -1, -1, 9, 
                 ],
               ]
             
class Lexer(object):
    def __init__(self, source):
        if isinstance(source, StringType):
            self.reader = PushbackReader(file(source, "r"))
        else:
            self.reader = PushbackReader(source)

        self.token = None
        self.state = STATE_INITIAL
        self.line = 0
        self.pos = 0
        self.cr = False
        self.eof = False
        self.text = StringBuffer()

    def filter(self):
        pass

    def peek(self):
        while(self.token == None):
            self.token = self.getToken()
            self.filter()
        return self.token

    def next(self):
        while (self.token == None):
            self.token = self.getToken()
            self.filter()

        result = self.token
        self.token = None
        return result

    def getToken(self):
        dfa_state = 0

        start_pos = self.pos
        start_line = self.line

        accept_state = -1
        accept_token = -1
        accept_length = -1
        accept_pos = -1
        accept_line = -1
        gotoTable = lexer_gotoTable[self.state]
        accept = accept_table[self.state]
        text = self.text
        text.clear()

        while 1:
            c = self.getChar()

            if(c != -1):
                if (c == 10):
                    if(self.cr):
                        self.cr = False
                    else:
                        self.line = self.line + 1
                        self.pos = 0
                elif (c == 13):
                    self.line = self.line + 1
                    self.pos = 0
                    self.cr = True
                else:
                    self.pos = self.pos + 1
                    self.cr = False

                text.append(chr(c))
                
                while 1:
                    if (dfa_state < -1):
                        oldState = (-2 -dfa_state)
                    else:
                        oldState = dfa_state

                    dfa_state = -1

                    tmp1 =  gotoTable[oldState]
                    low = 0
                    high = len(tmp1) - 1

                    while (low <= high):
                        middle = (low + high) / 2
                        tmp2 = tmp1[middle]

                        if(c < tmp2[0]):
                            high = middle - 1
                        elif (c > tmp2[1]):
                            low = middle + 1
                        else:
                            dfa_state = tmp2[2]
                            break
                    if (dfa_state >= -1):
                    	break
            else:
                dfa_state = -1

            if (dfa_state >= 0):
                if (accept[dfa_state] != -1):
                    accept_state = dfa_state
                    accept_token = accept[dfa_state]
                    accept_length = len(text)
                    accept_pos = self.pos
                    accept_line = self.line
            else:
                if (accept_state != -1):
                    if (accept_token >= 0 and accept_token <= 19):
                    	token = accept_tokens[accept_token](start_line + 1, start_pos + 1)
                    	if token.getText() == None:
                    	    token.setText(self.getText(accept_length))
                    	
                        self.pushBack(accept_length)
                        self.pos = accept_pos
                        self.line = accept_line
                      
                        return token
                else:
                    if (len(text) > 0):
                        raise LexerException("[" + str(start_line + 1) + "," + str(start_pos + 1) + "]" +" Unknown token: " + str(text))
                    else:
                        return EOF(start_line + 1, start_pos + 1)

    def getChar(self):
        if (self.eof):
            return -1
        c = self.reader.read()
        
        if (c == ""):
            result = -1
        else:
            result = ord(c)

        if(result == -1):
            self.eof = True

        return result

    def pushBack(self, acceptLength):
        text = self.text
        length = len(text)
        for i in range(length - 1, acceptLength - 1, -1):
            self.eof = False
            self.reader.unread(text.charAt(i))

    def unread(self, token):
        text = token.getText()
        length = len(text)

        for i in range(length-1, -1, -1):
            self.eof = False
            self.reader.unread(text[i])

        self.pos = token.getPos() - 1
        self.line = token.getLine() - 1

    def getText(self, acceptLength):
        sb = StringBuffer()
        text = self.text
        for i in range(acceptLength):
            sb.append(text.charAt(i))

        return str(sb)

############################# parser.py #############################################

class ParserException(Exception):
    def __init__(self, token, value):
        self.value = value
        self.token = token

    def getToken(self):
        return self.token

    def __str__(self):
        return self.value
        
class State(object):
    def __init__(self, state, nodes):
        self.state = state
        self.nodes = nodes

# parser actions
ACTION_SHIFT = 0
ACTION_REDUCE = 1
ACTION_ACCEPT = 2
ACTION_ERROR = 3
        
def new0(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    pbooleanconditionNode2 = nodeArrayList1[0]
    pstatementNode1 = ALogicstatementStatement(pbooleanconditionNode2)
    nodeList.append(pstatementNode1)
    return nodeList, 0

def new1(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    pscoreconditionNode2 = nodeArrayList1[0]
    pstatementNode1 = AScoreStatement(pscoreconditionNode2)
    nodeList.append(pstatementNode1)
    return nodeList, 0

def new2(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    listNode3 = list()
    pconditionNode2 = nodeArrayList1[0]
    pbooleanconditionNode1 = ABooleancondition(pconditionNode2,listNode3)
    nodeList.append(pbooleanconditionNode1)
    return nodeList, 1

def new3(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    pconditionNode2 = nodeArrayList1[0]
    listNode3 = nodeArrayList2[0]
    if (listNode3 != None):
        listNode4.extend(listNode3)
    pbooleanconditionNode1 = ABooleancondition(pconditionNode2,listNode4)
    nodeList.append(pbooleanconditionNode1)
    return nodeList, 1

def new4(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    tlparNode2 = nodeArrayList1[0]
    pbooleanconditionNode3 = nodeArrayList2[0]
    trparNode4 = nodeArrayList3[0]
    pconditionNode1 = AStatementCondition(tlparNode2,pbooleanconditionNode3,trparNode4)
    nodeList.append(pconditionNode1)
    return nodeList, 2

def new5(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    presidueNode2 = nodeArrayList1[0]
    pconditionNode1 = AResidueCondition(presidueNode2)
    nodeList.append(pconditionNode1)
    return nodeList, 2

def new6(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    pexcludestatementNode2 = nodeArrayList1[0]
    pconditionNode1 = AExcludeCondition(pexcludestatementNode2)
    nodeList.append(pconditionNode1)
    return nodeList, 2

def new7(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    pselectstatementNode2 = nodeArrayList1[0]
    pconditionNode1 = ASelectCondition(pselectstatementNode2)
    nodeList.append(pconditionNode1)
    return nodeList, 2

def new8(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    plogicsymbolNode2 = nodeArrayList1[0]
    pconditionNode3 = nodeArrayList2[0]
    pcondition2Node1 = ACondition2(plogicsymbolNode2,pconditionNode3)
    nodeList.append(pcondition2Node1)
    return nodeList, 3

def new9(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    tandNode2 = nodeArrayList1[0]
    plogicsymbolNode1 = AAndLogicsymbol(tandNode2)
    nodeList.append(plogicsymbolNode1)
    return nodeList, 4

def new10(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    torNode2 = nodeArrayList1[0]
    plogicsymbolNode1 = AOrLogicsymbol(torNode2)
    nodeList.append(plogicsymbolNode1)
    return nodeList, 4

def new11(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    tintegerNode3 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    presidueNode1 = AResidueResidue(None,tintegerNode3,listNode5)
    nodeList.append(presidueNode1)
    return nodeList, 5

def new12(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    taminoacidNode2 = nodeArrayList1[0]
    tintegerNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    presidueNode1 = AResidueResidue(taminoacidNode2,tintegerNode3,listNode5)
    nodeList.append(presidueNode1)
    return nodeList, 5

def new13(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode6 = list()
    tnotNode2 = nodeArrayList1[0]
    tintegerNode4 = nodeArrayList2[0]
    listNode5 = nodeArrayList3[0]
    if (listNode5 != None):
        listNode6.extend(listNode5)
    presidueNode1 = AResiduenotResidue(tnotNode2,None,tintegerNode4,listNode6)
    nodeList.append(presidueNode1)
    return nodeList, 5

def new14(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode6 = list()
    tnotNode2 = nodeArrayList1[0]
    taminoacidNode3 = nodeArrayList2[0]
    tintegerNode4 = nodeArrayList3[0]
    listNode5 = nodeArrayList4[0]
    if (listNode5 != None):
        listNode6.extend(listNode5)
    presidueNode1 = AResiduenotResidue(tnotNode2,taminoacidNode3,tintegerNode4,listNode6)
    nodeList.append(presidueNode1)
    return nodeList, 5

def new15(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode7 = list()
    tintegerNode3 = nodeArrayList1[0]
    tlparNode4 = nodeArrayList2[0]
    tnotNode5 = nodeArrayList3[0]
    listNode6 = nodeArrayList4[0]
    if (listNode6 != None):
        listNode7.extend(listNode6)
    trparNode8 = nodeArrayList5[0]
    presidueNode1 = AResidueinvertResidue(None,tintegerNode3,tlparNode4,tnotNode5,listNode7,trparNode8)
    nodeList.append(presidueNode1)
    return nodeList, 5

def new16(self):
    nodeList = list()
    nodeArrayList6 = self.pop()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode7 = list()
    taminoacidNode2 = nodeArrayList1[0]
    tintegerNode3 = nodeArrayList2[0]
    tlparNode4 = nodeArrayList3[0]
    tnotNode5 = nodeArrayList4[0]
    listNode6 = nodeArrayList5[0]
    if (listNode6 != None):
        listNode7.extend(listNode6)
    trparNode8 = nodeArrayList6[0]
    presidueNode1 = AResidueinvertResidue(taminoacidNode2,tintegerNode3,tlparNode4,tnotNode5,listNode7,trparNode8)
    nodeList.append(presidueNode1)
    return nodeList, 5

def new17(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    texcludeNode2 = nodeArrayList1[0]
    presidueNode3 = nodeArrayList2[0]
    pexcludestatementNode1 = AExcludestatement(texcludeNode2,presidueNode3)
    nodeList.append(pexcludestatementNode1)
    return nodeList, 6

def new18(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    tselectNode2 = nodeArrayList1[0]
    pselectstatement2Node3 = nodeArrayList2[0]
    pselectstatementNode1 = ASelectstatement(tselectNode2,pselectstatement2Node3)
    nodeList.append(pselectstatementNode1)
    return nodeList, 7

def new19(self):
    nodeList = list()
    nodeArrayList6 = self.pop()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    texactlyNode2 = nodeArrayList1[0]
    tintegerNode3 = nodeArrayList2[0]
    tfromNode4 = nodeArrayList3[0]
    tlparNode5 = nodeArrayList4[0]
    pselectlistNode6 = nodeArrayList5[0]
    trparNode7 = nodeArrayList6[0]
    pselectstatement2Node1 = AExactlySelectstatement2(texactlyNode2,tintegerNode3,tfromNode4,tlparNode5,pselectlistNode6,trparNode7)
    nodeList.append(pselectstatement2Node1)
    return nodeList, 8

def new20(self):
    nodeList = list()
    nodeArrayList6 = self.pop()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    tatleastNode2 = nodeArrayList1[0]
    tintegerNode3 = nodeArrayList2[0]
    tfromNode4 = nodeArrayList3[0]
    tlparNode5 = nodeArrayList4[0]
    pselectlistNode6 = nodeArrayList5[0]
    trparNode7 = nodeArrayList6[0]
    pselectstatement2Node1 = AAtleastSelectstatement2(tatleastNode2,tintegerNode3,tfromNode4,tlparNode5,pselectlistNode6,trparNode7)
    nodeList.append(pselectstatement2Node1)
    return nodeList, 8

def new21(self):
    nodeList = list()
    nodeArrayList6 = self.pop()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    tnotmorethanNode2 = nodeArrayList1[0]
    tintegerNode3 = nodeArrayList2[0]
    tfromNode4 = nodeArrayList3[0]
    tlparNode5 = nodeArrayList4[0]
    pselectlistNode6 = nodeArrayList5[0]
    trparNode7 = nodeArrayList6[0]
    pselectstatement2Node1 = ANotmorethanSelectstatement2(tnotmorethanNode2,tintegerNode3,tfromNode4,tlparNode5,pselectlistNode6,trparNode7)
    nodeList.append(pselectstatement2Node1)
    return nodeList, 8

def new22(self):
    nodeList = list()
    nodeArrayList9 = self.pop()
    nodeArrayList8 = self.pop()
    nodeArrayList7 = self.pop()
    nodeArrayList6 = self.pop()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    tatleastNode2 = nodeArrayList1[0]
    tintegerNode3 = nodeArrayList2[0]
    plogicsymbolNode4 = nodeArrayList3[0]
    tnotmorethanNode5 = nodeArrayList4[0]
    tintegerNode6 = nodeArrayList5[0]
    tfromNode7 = nodeArrayList6[0]
    tlparNode8 = nodeArrayList7[0]
    pselectlistNode9 = nodeArrayList8[0]
    trparNode10 = nodeArrayList9[0]
    pselectstatement2Node1 = AAtleastnotmorethanSelectstatement2(tatleastNode2,tintegerNode3,plogicsymbolNode4,tnotmorethanNode5,tintegerNode6,tfromNode7,tlparNode8,pselectlistNode9,trparNode10)
    nodeList.append(pselectstatement2Node1)
    return nodeList, 8

def new23(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    listNode3 = list()
    presidueNode2 = nodeArrayList1[0]
    pselectlistNode1 = ASelectlist(presidueNode2,listNode3)
    nodeList.append(pselectlistNode1)
    return nodeList, 9

def new24(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    presidueNode2 = nodeArrayList1[0]
    listNode3 = nodeArrayList2[0]
    if (listNode3 != None):
        listNode4.extend(listNode3)
    pselectlistNode1 = ASelectlist(presidueNode2,listNode4)
    nodeList.append(pselectlistNode1)
    return nodeList, 9

def new25(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    tcommaNode2 = nodeArrayList1[0]
    presidueNode3 = nodeArrayList2[0]
    plistitemsNode1 = AListitems(tcommaNode2,presidueNode3)
    nodeList.append(plistitemsNode1)
    return nodeList, 10

def new26(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    tscoreNode2 = nodeArrayList1[0]
    tfromNode3 = nodeArrayList2[0]
    tlparNode4 = nodeArrayList3[0]
    pscorelistNode5 = nodeArrayList4[0]
    trparNode6 = nodeArrayList5[0]
    pscoreconditionNode1 = AScorecondition(tscoreNode2,tfromNode3,tlparNode4,pscorelistNode5,trparNode6)
    nodeList.append(pscoreconditionNode1)
    return nodeList, 11

def new27(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    listNode3 = list()
    pscoreitemNode2 = nodeArrayList1[0]
    pscorelistNode1 = AScorelist(pscoreitemNode2,listNode3)
    nodeList.append(pscorelistNode1)
    return nodeList, 12

def new28(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    pscoreitemNode2 = nodeArrayList1[0]
    listNode3 = nodeArrayList2[0]
    if (listNode3 != None):
        listNode4.extend(listNode3)
    pscorelistNode1 = AScorelist(pscoreitemNode2,listNode4)
    nodeList.append(pscorelistNode1)
    return nodeList, 12

def new29(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    pbooleanconditionNode2 = nodeArrayList1[0]
    tmapperNode3 = nodeArrayList2[0]
    pnumberNode5 = nodeArrayList3[0]
    pscoreitemNode1 = AStatementScoreitem(pbooleanconditionNode2,tmapperNode3,None,pnumberNode5)
    nodeList.append(pscoreitemNode1)
    return nodeList, 13

def new30(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    pbooleanconditionNode2 = nodeArrayList1[0]
    tmapperNode3 = nodeArrayList2[0]
    tminNode4 = nodeArrayList3[0]
    pnumberNode5 = nodeArrayList4[0]
    pscoreitemNode1 = AStatementScoreitem(pbooleanconditionNode2,tmapperNode3,tminNode4,pnumberNode5)
    nodeList.append(pscoreitemNode1)
    return nodeList, 13

def new31(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    tmaxNode2 = nodeArrayList1[0]
    tlparNode3 = nodeArrayList2[0]
    pscorelistNode4 = nodeArrayList3[0]
    trparNode5 = nodeArrayList4[0]
    pscoreitemNode1 = AMaxScoreitem(tmaxNode2,tlparNode3,pscorelistNode4,trparNode5)
    nodeList.append(pscoreitemNode1)
    return nodeList, 13

def new32(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    tcommaNode2 = nodeArrayList1[0]
    pscoreitemNode3 = nodeArrayList2[0]
    pscoreitemsNode1 = AScoreitems(tcommaNode2,pscoreitemNode3)
    nodeList.append(pscoreitemsNode1)
    return nodeList, 14

def new33(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    tintegerNode2 = nodeArrayList1[0]
    pnumberNode1 = AIntegerNumber(tintegerNode2)
    nodeList.append(pnumberNode1)
    return nodeList, 15

def new34(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    tfloatNode2 = nodeArrayList1[0]
    pnumberNode1 = AFloatNumber(tfloatNode2)
    nodeList.append(pnumberNode1)
    return nodeList, 15

def new35(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    listNode2 = list()
    pcondition2Node1 = nodeArrayList1[0]
    if (pcondition2Node1 != None):
        listNode2.append(pcondition2Node1)
    nodeList.append(listNode2)
    return nodeList, 16

def new36(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode3 = list()
    listNode1 = nodeArrayList1[0]
    pcondition2Node2 = nodeArrayList2[0]
    if (listNode1 != None):
        listNode3.extend(listNode1)
    if (pcondition2Node2 != None):
        listNode3.append(pcondition2Node2)
    nodeList.append(listNode3)
    return nodeList, 16

def new37(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    listNode2 = list()
    taminoacidNode1 = nodeArrayList1[0]
    if (taminoacidNode1 != None):
        listNode2.append(taminoacidNode1)
    nodeList.append(listNode2)
    return nodeList, 17

def new38(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode3 = list()
    listNode1 = nodeArrayList1[0]
    taminoacidNode2 = nodeArrayList2[0]
    if (listNode1 != None):
        listNode3.extend(listNode1)
    if (taminoacidNode2 != None):
        listNode3.append(taminoacidNode2)
    nodeList.append(listNode3)
    return nodeList, 17

def new39(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    listNode2 = list()
    plistitemsNode1 = nodeArrayList1[0]
    if (plistitemsNode1 != None):
        listNode2.append(plistitemsNode1)
    nodeList.append(listNode2)
    return nodeList, 18

def new40(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode3 = list()
    listNode1 = nodeArrayList1[0]
    plistitemsNode2 = nodeArrayList2[0]
    if (listNode1 != None):
        listNode3.extend(listNode1)
    if (plistitemsNode2 != None):
        listNode3.append(plistitemsNode2)
    nodeList.append(listNode3)
    return nodeList, 18

def new41(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    listNode2 = list()
    pscoreitemsNode1 = nodeArrayList1[0]
    if (pscoreitemsNode1 != None):
        listNode2.append(pscoreitemsNode1)
    nodeList.append(listNode2)
    return nodeList, 19

def new42(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode3 = list()
    listNode1 = nodeArrayList1[0]
    pscoreitemsNode2 = nodeArrayList2[0]
    if (listNode1 != None):
        listNode3.extend(listNode1)
    if (pscoreitemsNode2 != None):
        listNode3.append(pscoreitemsNode2)
    nodeList.append(listNode3)
    return nodeList, 19

newnode = [
  new0,
  new1,
  new2,
  new3,
  new4,
  new5,
  new6,
  new7,
  new8,
  new9,
  new10,
  new11,
  new12,
  new13,
  new14,
  new15,
  new16,
  new17,
  new18,
  new19,
  new20,
  new21,
  new22,
  new23,
  new24,
  new25,
  new26,
  new27,
  new28,
  new29,
  new30,
  new31,
  new32,
  new33,
  new34,
  new35,
  new36,
  new37,
  new38,
  new39,
  new40,
  new41,
  new42
]

actionTable = [
                [
                  [-1, 3, 0],
                  [3, 0, 1],
                  [4, 0, 2],
                  [5, 0, 3],
                  [10, 0, 4],
                  [12, 0, 5],
                  [16, 0, 6],
                  [18, 0, 7],
                ],
                [
                  [-1, 3, 1],
                  [16, 0, 15],
                  [18, 0, 16],
                ],
                [
                  [-1, 3, 2],
                  [3, 0, 1],
                  [16, 0, 6],
                  [18, 0, 7],
                ],
                [
                  [-1, 3, 3],
                  [7, 0, 18],
                  [8, 0, 19],
                  [9, 0, 20],
                ],
                [
                  [-1, 3, 4],
                  [6, 0, 22],
                ],
                [
                  [-1, 3, 5],
                  [3, 0, 1],
                  [4, 0, 2],
                  [5, 0, 3],
                  [12, 0, 5],
                  [16, 0, 6],
                  [18, 0, 7],
                ],
                [
                  [-1, 3, 6],
                  [12, 0, 24],
                  [18, 0, 25],
                ],
                [
                  [-1, 3, 7],
                  [16, 0, 27],
                ],
                [
                  [-1, 3, 8],
                  [19, 2, -1],
                ],
                [
                  [-1, 1, 0],
                ],
                [
                  [-1, 1, 2],
                  [1, 0, 28],
                  [2, 0, 29],
                ],
                [
                  [-1, 1, 5],
                ],
                [
                  [-1, 1, 6],
                ],
                [
                  [-1, 1, 7],
                ],
                [
                  [-1, 1, 1],
                ],
                [
                  [-1, 3, 15],
                  [18, 0, 25],
                ],
                [
                  [-1, 3, 16],
                  [16, 0, 34],
                ],
                [
                  [-1, 1, 17],
                ],
                [
                  [-1, 3, 18],
                  [16, 0, 35],
                ],
                [
                  [-1, 3, 19],
                  [16, 0, 36],
                ],
                [
                  [-1, 3, 20],
                  [16, 0, 37],
                ],
                [
                  [-1, 1, 18],
                ],
                [
                  [-1, 3, 22],
                  [12, 0, 38],
                ],
                [
                  [-1, 3, 23],
                  [13, 0, 39],
                ],
                [
                  [-1, 3, 24],
                  [3, 0, 40],
                ],
                [
                  [-1, 1, 37],
                ],
                [
                  [-1, 1, 11],
                  [18, 0, 41],
                ],
                [
                  [-1, 3, 27],
                  [12, 0, 42],
                  [18, 0, 25],
                ],
                [
                  [-1, 1, 9],
                ],
                [
                  [-1, 1, 10],
                ],
                [
                  [-1, 1, 35],
                ],
                [
                  [-1, 3, 31],
                  [3, 0, 1],
                  [4, 0, 2],
                  [5, 0, 3],
                  [12, 0, 5],
                  [16, 0, 6],
                  [18, 0, 7],
                ],
                [
                  [-1, 1, 3],
                  [1, 0, 28],
                  [2, 0, 29],
                ],
                [
                  [-1, 1, 13],
                  [18, 0, 41],
                ],
                [
                  [-1, 3, 34],
                  [18, 0, 25],
                ],
                [
                  [-1, 3, 35],
                  [1, 0, 28],
                  [2, 0, 29],
                  [6, 0, 47],
                ],
                [
                  [-1, 3, 36],
                  [6, 0, 49],
                ],
                [
                  [-1, 3, 37],
                  [6, 0, 50],
                ],
                [
                  [-1, 3, 38],
                  [3, 0, 1],
                  [4, 0, 2],
                  [5, 0, 3],
                  [11, 0, 51],
                  [12, 0, 5],
                  [16, 0, 6],
                  [18, 0, 7],
                ],
                [
                  [-1, 1, 4],
                ],
                [
                  [-1, 3, 40],
                  [18, 0, 25],
                ],
                [
                  [-1, 1, 38],
                ],
                [
                  [-1, 3, 42],
                  [3, 0, 56],
                ],
                [
                  [-1, 1, 12],
                  [18, 0, 41],
                ],
                [
                  [-1, 1, 8],
                ],
                [
                  [-1, 1, 36],
                ],
                [
                  [-1, 1, 14],
                  [18, 0, 41],
                ],
                [
                  [-1, 3, 47],
                  [12, 0, 57],
                ],
                [
                  [-1, 3, 48],
                  [9, 0, 58],
                ],
                [
                  [-1, 3, 49],
                  [12, 0, 59],
                ],
                [
                  [-1, 3, 50],
                  [12, 0, 60],
                ],
                [
                  [-1, 3, 51],
                  [12, 0, 61],
                ],
                [
                  [-1, 3, 52],
                  [14, 0, 62],
                ],
                [
                  [-1, 3, 53],
                  [13, 0, 63],
                ],
                [
                  [-1, 1, 27],
                  [15, 0, 64],
                ],
                [
                  [-1, 3, 55],
                  [13, 0, 67],
                  [18, 0, 41],
                ],
                [
                  [-1, 3, 56],
                  [18, 0, 25],
                ],
                [
                  [-1, 3, 57],
                  [3, 0, 1],
                  [16, 0, 6],
                  [18, 0, 7],
                ],
                [
                  [-1, 3, 58],
                  [16, 0, 71],
                ],
                [
                  [-1, 3, 59],
                  [3, 0, 1],
                  [16, 0, 6],
                  [18, 0, 7],
                ],
                [
                  [-1, 3, 60],
                  [3, 0, 1],
                  [16, 0, 6],
                  [18, 0, 7],
                ],
                [
                  [-1, 3, 61],
                  [3, 0, 1],
                  [4, 0, 2],
                  [5, 0, 3],
                  [11, 0, 51],
                  [12, 0, 5],
                  [16, 0, 6],
                  [18, 0, 7],
                ],
                [
                  [-1, 3, 62],
                  [0, 0, 75],
                  [16, 0, 76],
                  [17, 0, 77],
                ],
                [
                  [-1, 1, 26],
                ],
                [
                  [-1, 3, 64],
                  [3, 0, 1],
                  [4, 0, 2],
                  [5, 0, 3],
                  [11, 0, 51],
                  [12, 0, 5],
                  [16, 0, 6],
                  [18, 0, 7],
                ],
                [
                  [-1, 1, 41],
                ],
                [
                  [-1, 1, 28],
                  [15, 0, 64],
                ],
                [
                  [-1, 1, 15],
                ],
                [
                  [-1, 3, 68],
                  [13, 0, 81],
                  [18, 0, 41],
                ],
                [
                  [-1, 1, 23],
                  [15, 0, 82],
                ],
                [
                  [-1, 3, 70],
                  [13, 0, 85],
                ],
                [
                  [-1, 3, 71],
                  [6, 0, 86],
                ],
                [
                  [-1, 3, 72],
                  [13, 0, 87],
                ],
                [
                  [-1, 3, 73],
                  [13, 0, 88],
                ],
                [
                  [-1, 3, 74],
                  [13, 0, 89],
                ],
                [
                  [-1, 3, 75],
                  [16, 0, 76],
                  [17, 0, 77],
                ],
                [
                  [-1, 1, 33],
                ],
                [
                  [-1, 1, 34],
                ],
                [
                  [-1, 1, 29],
                ],
                [
                  [-1, 1, 32],
                ],
                [
                  [-1, 1, 42],
                ],
                [
                  [-1, 1, 16],
                ],
                [
                  [-1, 3, 82],
                  [3, 0, 1],
                  [16, 0, 6],
                  [18, 0, 7],
                ],
                [
                  [-1, 1, 39],
                ],
                [
                  [-1, 1, 24],
                  [15, 0, 82],
                ],
                [
                  [-1, 1, 20],
                ],
                [
                  [-1, 3, 86],
                  [12, 0, 93],
                ],
                [
                  [-1, 1, 19],
                ],
                [
                  [-1, 1, 21],
                ],
                [
                  [-1, 1, 31],
                ],
                [
                  [-1, 1, 30],
                ],
                [
                  [-1, 1, 25],
                ],
                [
                  [-1, 1, 40],
                ],
                [
                  [-1, 3, 93],
                  [3, 0, 1],
                  [16, 0, 6],
                  [18, 0, 7],
                ],
                [
                  [-1, 3, 94],
                  [13, 0, 95],
                ],
                [
                  [-1, 1, 22],
                ],
              ]

parser_gotoTable = [
                     [
                       [-1, 8],
                     ],
                     [
                       [-1, 52],
                       [0, 9],
                       [5, 23],
                     ],
                     [
                       [-1, 10],
                       [31, 44],
                     ],
                     [
                       [-1, 30],
                       [32, 45],
                     ],
                     [
                       [-1, 31],
                       [35, 48],
                     ],
                     [
                       [-1, 11],
                       [2, 17],
                       [57, 69],
                       [59, 69],
                       [60, 69],
                       [82, 91],
                       [93, 69],
                     ],
                     [
                       [-1, 12],
                     ],
                     [
                       [-1, 13],
                     ],
                     [
                       [-1, 21],
                     ],
                     [
                       [-1, 70],
                       [59, 72],
                       [60, 73],
                       [93, 94],
                     ],
                     [
                       [-1, 83],
                       [84, 92],
                     ],
                     [
                       [-1, 14],
                     ],
                     [
                       [-1, 53],
                       [61, 74],
                     ],
                     [
                       [-1, 54],
                       [64, 79],
                     ],
                     [
                       [-1, 65],
                       [66, 80],
                     ],
                     [
                       [-1, 78],
                       [75, 90],
                     ],
                     [
                       [-1, 32],
                     ],
                     [
                       [-1, 26],
                       [15, 33],
                       [27, 43],
                       [34, 46],
                       [40, 55],
                       [56, 68],
                     ],
                     [
                       [-1, 84],
                     ],
                     [
                       [-1, 66],
                     ],
                   ]
    
errorMessages = [
                  "expecting: 'NOT', 'EXCLUDE', 'SELECT', 'SCORE', '(', integer, amino acid",
                  "expecting: integer, amino acid",
                  "expecting: 'NOT', integer, amino acid",
                  "expecting: 'ATLEAST', 'EXACTLY', 'NOTMORETHAN'",
                  "expecting: 'FROM'",
                  "expecting: 'NOT', 'EXCLUDE', 'SELECT', '(', integer, amino acid",
                  "expecting: '(', amino acid",
                  "expecting: integer",
                  "expecting: EOF",
                  "expecting: 'AND', 'OR', ')', '=>', EOF",
                  "expecting: amino acid",
                  "expecting: '('",
                  "expecting: ')'",
                  "expecting: 'NOT'",
                  "expecting: 'AND', 'OR', ')', '=>', ',', amino acid, EOF",
                  "expecting: 'NOT', 'EXCLUDE', 'SELECT', 'NOTMORETHAN', '(', integer, amino acid",
                  "expecting: 'AND', 'OR', 'FROM'",
                  "expecting: 'NOT', 'EXCLUDE', 'SELECT', 'MAX', '(', integer, amino acid",
                  "expecting: 'NOTMORETHAN'",
                  "expecting: '=>'",
                  "expecting: ')', ','",
                  "expecting: ')', amino acid",
                  "expecting: '-', integer, float",
                  "expecting: 'AND', 'OR', ')', '=>', ',', EOF",
                  "expecting: integer, float",
                ]
    
errors = [
           0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 9, 9, 9, 8, 10, 7, 9, 7, 7, 7, 9, 11, 12, 13, 14, 14, 6, 15, 15, 9, 5, 9, 14, 10, 16, 4, 4, 17, 9, 10, 14, 13, 14, 9, 9, 14, 11, 18, 11, 11, 11, 19, 12, 20, 21, 10, 2, 7, 2, 2, 17, 22, 8, 17, 20, 20, 23, 21, 20, 12, 4, 12, 12, 12, 24, 20, 20, 20, 20, 20, 23, 2, 20, 20, 9, 11, 9, 9, 20, 20, 20, 20, 2, 12, 9, 
         ]
                                   
class Parser(object):
    def __init__(self, lexer):
        self.lexer = lexer
        self.stack = Stack()
     
    def goTo(self, index):
        state = self.state()
        low = 1
        high = len(parser_gotoTable[index]) - 1
        value = parser_gotoTable[index][0][1]

        while (low <= high):
            middle = (low + high) / 2

            if (state < parser_gotoTable[index][middle][0]):
                high = middle - 1
            elif (state > parser_gotoTable[index][middle][0]):
                low = middle + 1
            else:
                value = parser_gotoTable[index][middle][1]
                break

        return value

    def push(self, numstate, listNode):
        self.stack.push(State(numstate, listNode))

    def state(self):
        return self.stack.peek().state

    def pop(self):
        return self.stack.pop().nodes

    def parse(self):
        self.push(0, None)
        lexer = self.lexer
        last_shift = 0
        last_pos = 0
        last_line = 0
        last_token = None
        action = [0,0]
        
        while 1:
            while (lexer.peek().TokenIndex == -1):
                lexer.next()

            token = lexer.peek()
            last_pos = token.getPos()
            last_line = token.getLine()
            last_token = token

            index = token.TokenIndex
            action[0] = actionTable[self.state()][0][1]
            action[1] = actionTable[self.state()][0][2]

            low = 1
            high = len(actionTable[self.state()]) - 1

            while (low <= high):
                middle = (low + high) / 2

                if (index < actionTable[self.state()][middle][0]):
                    high = middle - 1
                elif (index > actionTable[self.state()][middle][0]):
                    low = middle + 1
                else:
                    action[0] = actionTable[self.state()][middle][1]
                    action[1] = actionTable[self.state()][middle][2]
                    break

            if (action[0] == ACTION_SHIFT):
                nodeList = list()
                nodeList.append(lexer.next())
                self.push(action[1], nodeList)
                last_shift = action[1]
            elif (action[0] == ACTION_REDUCE):
                if (action[1] >= 0 and action[1] <= 42):
                    nodeList, leftside = newnode[action[1]](self)
                    self.push(self.goTo(leftside), nodeList)
            elif (action[0] == ACTION_ACCEPT):
                node2 = lexer.next()
                node1 = self.pop()[0]
                node = Start(node1, node2)
                return node
            elif (action[0] == ACTION_ERROR):
                raise ParserException(last_token, "[" + str(last_line) + "," + str(last_pos) + "] " + errorMessages[errors[action[1]]])
    
    def unescape (self, s):
        _out_ = StringBuffer()
      
        for i in range(len(s)):
            c = s[i]

            if (c == '\\'):
                if ((i + 1) < len(s)):
                    i += 1
                    if (s[i] == 'n'):
                        _out_.append ("\n")
                    elif (s[i] == 'r'):
                        _out_.append("\r")
                    elif (s[i] == '"'):
                        _out_.append ("\"");
                    elif (s[i] == '\\'):
                        _out_.append ("\\");
                    elif (s[i] == '0'):
                        if (s[i:].startswith("000")):
                            _out_.append("\000")
                            i += 2
                        else:
                            _out_.append ("\\")
                            _out_.append(s[i])
                    elif (s[i] == 'u'):
                        hstr = s[i+1:(i + 5)]
                    
                        if (len(hstr) == 4):
                            try:
                                _out_.append(unichr(int(hstr, 16)))
                                i += 5
                            except ValueError:
                                _out_.append("\\")
                                _out_.append(s[i])
                        else:
                            _out_.append("\\")
                            _out_.append(s[i])
                    else:
                        _out_.append("\\")
                        _out_.append(s[i])
                else:
                    _out_.append(c)
            else:
                _out_.append(c)
              
        return str(_out_)


